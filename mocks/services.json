{
  "persistent_notification": {
    "create": {
      "name": "Create",
      "description": "Shows a notification on the notifications panel.",
      "fields": {
        "message": {
          "required": true,
          "example": "Please check your configuration.yaml.",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message body of the notification."
        },
        "title": {
          "example": "Test notification",
          "selector": {
            "text": null
          },
          "name": "Title",
          "description": "Optional title of the notification."
        },
        "notification_id": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Notification ID",
          "description": "ID of the notification. This new notification will overwrite an existing notification with the same ID."
        }
      }
    },
    "dismiss": {
      "name": "Dismiss",
      "description": "Deletes a notification from the notifications panel.",
      "fields": {
        "notification_id": {
          "required": true,
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Notification ID",
          "description": "ID of the notification to be deleted."
        }
      }
    },
    "dismiss_all": {
      "name": "Dismiss all",
      "description": "Deletes all notifications from the notifications panel.",
      "fields": {}
    }
  },
  "homeassistant": {
    "save_persistent_states": {
      "name": "Save persistent states",
      "description": "Saves the persistent states immediately. Maintains the normal periodic saving interval.",
      "fields": {}
    },
    "turn_off": {
      "name": "Generic turn off",
      "description": "Generic action to turn devices off under any domain.",
      "fields": {},
      "target": {
        "entity": [{}]
      }
    },
    "turn_on": {
      "name": "Generic turn on",
      "description": "Generic action to turn devices on under any domain.",
      "fields": {},
      "target": {
        "entity": [{}]
      }
    },
    "toggle": {
      "name": "Generic toggle",
      "description": "Generic action to toggle devices on/off under any domain.",
      "fields": {},
      "target": {
        "entity": [{}]
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Stops Home Assistant.",
      "fields": {}
    },
    "restart": {
      "name": "Restart",
      "description": "Restarts Home Assistant.",
      "fields": {}
    },
    "check_config": {
      "name": "Check configuration",
      "description": "Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.",
      "fields": {}
    },
    "update_entity": {
      "name": "Update entity",
      "description": "Forces one or more entities to update their data.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities to update",
          "description": "List of entities to force update."
        }
      }
    },
    "reload_core_config": {
      "name": "Reload Core configuration",
      "description": "Reloads the Core configuration from the YAML-configuration.",
      "fields": {}
    },
    "set_location": {
      "name": "Set location",
      "description": "Updates the Home Assistant location.",
      "fields": {
        "latitude": {
          "required": true,
          "example": 32.87336,
          "selector": {
            "number": {
              "mode": "box",
              "min": -90,
              "max": 90,
              "step": "any"
            }
          },
          "name": "Latitude",
          "description": "Latitude of your location."
        },
        "longitude": {
          "required": true,
          "example": 117.22743,
          "selector": {
            "number": {
              "mode": "box",
              "min": -180,
              "max": 180,
              "step": "any"
            }
          },
          "name": "Longitude",
          "description": "Longitude of your location."
        },
        "elevation": {
          "required": false,
          "example": 120,
          "selector": {
            "number": {
              "mode": "box",
              "step": "any"
            }
          },
          "name": "Elevation",
          "description": "Elevation of your location above sea level."
        }
      }
    },
    "reload_custom_templates": {
      "name": "Reload custom Jinja2 templates",
      "description": "Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.",
      "fields": {}
    },
    "reload_config_entry": {
      "name": "Reload config entry",
      "description": "Reloads the specified config entry.",
      "fields": {
        "entry_id": {
          "advanced": true,
          "required": false,
          "example": "8955375327824e14ba89e4b29cc3ec9a",
          "selector": {
            "text": null
          },
          "name": "Config entry ID",
          "description": "The configuration entry ID of the entry to be reloaded."
        }
      },
      "target": {
        "entity": [{}],
        "device": [{}]
      }
    },
    "reload_all": {
      "name": "Reload all",
      "description": "Reload all YAML configuration that can be reloaded without restarting Home Assistant.",
      "fields": {}
    }
  },
  "system_log": {
    "clear": {
      "name": "Clear",
      "description": "Deletes all log entries.",
      "fields": {}
    },
    "write": {
      "name": "Write",
      "description": "Write log entry.",
      "fields": {
        "message": {
          "required": true,
          "example": "Something went wrong",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message to log."
        },
        "level": {
          "default": "error",
          "selector": {
            "select": {
              "options": ["debug", "info", "warning", "error", "critical"],
              "translation_key": "level"
            }
          },
          "name": "Level",
          "description": "Log level."
        },
        "logger": {
          "example": "mycomponent.myplatform",
          "selector": {
            "text": null
          },
          "name": "Logger",
          "description": "Logger name under which to log the message. Defaults to `system_log.external`."
        }
      }
    }
  },
  "logger": {
    "set_default_level": {
      "name": "Set default level",
      "description": "Sets the default log level for integrations.",
      "fields": {
        "level": {
          "selector": {
            "select": {
              "options": [
                "debug",
                "info",
                "warning",
                "error",
                "fatal",
                "critical"
              ],
              "translation_key": "level"
            }
          },
          "name": "Level",
          "description": "Default severity level for all integrations."
        }
      }
    },
    "set_level": {
      "name": "Set level",
      "description": "Sets the log level for one or more integrations.",
      "fields": {}
    }
  },
  "person": {
    "reload": {
      "name": "Reload",
      "description": "Reloads persons from the YAML-configuration.",
      "fields": {}
    }
  },
  "frontend": {
    "set_theme": {
      "name": "Set the default theme",
      "description": "Sets the default theme Home Assistant uses. Can be overridden by a user.",
      "fields": {
        "name": {
          "required": true,
          "example": "default",
          "selector": {
            "theme": {
              "include_default": true
            }
          },
          "name": "Theme",
          "description": "Name of a theme."
        },
        "mode": {
          "default": "light",
          "selector": {
            "select": {
              "options": ["dark", "light"],
              "translation_key": "mode"
            }
          },
          "name": "Mode",
          "description": "Theme mode."
        }
      }
    },
    "reload_themes": {
      "name": "Reload themes",
      "description": "Reloads themes from the YAML-configuration.",
      "fields": {}
    }
  },
  "recorder": {
    "purge": {
      "name": "Purge",
      "description": "Starts purge task - to clean up old data from your database.",
      "fields": {
        "keep_days": {
          "selector": {
            "number": {
              "min": 0,
              "max": 365,
              "unit_of_measurement": "days"
            }
          },
          "name": "Days to keep",
          "description": "Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged."
        },
        "repack": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Repack",
          "description": "Attempt to save disk space by rewriting the entire database file."
        },
        "apply_filter": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Apply filter",
          "description": "Apply `entity_id` and `event_type` filters in addition to time-based purge."
        }
      }
    },
    "purge_entities": {
      "name": "Purge entities",
      "description": "Starts a purge task to remove the data related to specific entities from your database.",
      "fields": {
        "entity_id": {
          "required": false,
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities to remove",
          "description": "List of entities for which the data is to be removed from the recorder database."
        },
        "domains": {
          "example": "sun",
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Domains to remove",
          "description": "List of domains for which the data needs to be removed from the recorder database."
        },
        "entity_globs": {
          "example": "domain*.object_id*",
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Entity globs to remove",
          "description": "List of glob patterns used to select the entities for which the data is to be removed from the recorder database."
        },
        "keep_days": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 365,
              "unit_of_measurement": "days"
            }
          },
          "name": "Days to keep",
          "description": "Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately."
        }
      }
    },
    "enable": {
      "name": "Enable",
      "description": "Starts the recording of events and state changes.",
      "fields": {}
    },
    "disable": {
      "name": "Disable",
      "description": "Stops the recording of events and state changes.",
      "fields": {}
    }
  },
  "hassio": {
    "addon_start": {
      "name": "Start add-on",
      "description": "Starts an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to start."
        }
      }
    },
    "addon_stop": {
      "name": "Stop add-on",
      "description": "Stops an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to stop."
        }
      }
    },
    "addon_restart": {
      "name": "Restart add-on",
      "description": "Restarts an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to restart."
        }
      }
    },
    "addon_update": {
      "name": "Update add-on",
      "description": "Updates an add-on. This action should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to update."
        }
      }
    },
    "addon_stdin": {
      "name": "Write data to add-on stdin",
      "description": "Writes data to the add-on's standard input.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to write to."
        }
      }
    },
    "host_shutdown": {
      "name": "Power off the host system",
      "description": "Powers off the host system.",
      "fields": {}
    },
    "host_reboot": {
      "name": "Reboot the host system",
      "description": "Reboots the host system.",
      "fields": {}
    },
    "backup_full": {
      "name": "Create a full backup",
      "description": "Creates a full backup.",
      "fields": {
        "name": {
          "example": "Backup 1",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Optional (default = current date and time)."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Password to protect the backup with."
        },
        "compressed": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Compressed",
          "description": "Compresses the backup files."
        },
        "location": {
          "example": "my_backup_mount",
          "selector": {
            "backup_location": null
          },
          "name": "Location",
          "description": "Name of a backup network storage to host backups."
        },
        "homeassistant_exclude_database": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant exclude database",
          "description": "Exclude the Home Assistant database file from the backup."
        }
      }
    },
    "backup_partial": {
      "name": "Create a partial backup",
      "description": "Creates a partial backup.",
      "fields": {
        "homeassistant": {
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant settings",
          "description": "Includes Home Assistant settings in the backup."
        },
        "homeassistant_exclude_database": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant exclude database",
          "description": "Exclude the Home Assistant database file from the backup."
        },
        "addons": {
          "example": ["core_ssh", "core_samba", "core_mosquitto"],
          "selector": {
            "object": null
          },
          "name": "Add-ons",
          "description": "List of add-ons to include in the backup. Use the name slug of each add-on."
        },
        "folders": {
          "example": ["homeassistant", "share"],
          "selector": {
            "object": null
          },
          "name": "Folders",
          "description": "List of directories to include in the backup."
        },
        "name": {
          "example": "Partial backup 1",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Optional (default = current date and time)."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Password to protect the backup with."
        },
        "compressed": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Compressed",
          "description": "Compresses the backup files."
        },
        "location": {
          "example": "my_backup_mount",
          "selector": {
            "backup_location": null
          },
          "name": "Location",
          "description": "Name of a backup network storage to host backups."
        }
      }
    },
    "restore_full": {
      "name": "Restore from full backup",
      "description": "Restores from full backup.",
      "fields": {
        "slug": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Slug",
          "description": "Slug of backup to restore from."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Optional password."
        }
      }
    },
    "restore_partial": {
      "name": "Restore from partial backup",
      "description": "Restores from a partial backup.",
      "fields": {
        "slug": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Slug",
          "description": "Slug of backup to restore from."
        },
        "homeassistant": {
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant settings",
          "description": "Restores Home Assistant."
        },
        "folders": {
          "example": ["homeassistant", "share"],
          "selector": {
            "object": null
          },
          "name": "Folders",
          "description": "List of directories to restore from the backup."
        },
        "addons": {
          "example": ["core_ssh", "core_samba", "core_mosquitto"],
          "selector": {
            "object": null
          },
          "name": "Add-ons",
          "description": "List of add-ons to restore from the backup. Use the name slug of each add-on."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Optional password."
        }
      }
    }
  },
  "update": {
    "install": {
      "name": "Install update",
      "description": "Installs an update for a device or service.",
      "fields": {
        "version": {
          "required": false,
          "example": "1.0.0",
          "selector": {
            "text": null
          },
          "name": "Version",
          "description": "The version to install. If omitted, the latest version will be installed."
        },
        "backup": {
          "filter": {
            "supported_features": [8]
          },
          "required": false,
          "selector": {
            "boolean": null
          },
          "name": "Backup",
          "description": "If supported by the integration, this creates a backup before starting the update."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["update"]
          }
        ]
      }
    },
    "skip": {
      "name": "Skip update",
      "description": "Marks currently available update as skipped.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["update"]
          }
        ]
      }
    },
    "clear_skipped": {
      "name": "Clear skipped update",
      "description": "Removes the skipped version marker from an update.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["update"]
          }
        ]
      }
    }
  },
  "cloud": {
    "remote_connect": {
      "name": "Enable remote access",
      "description": "Makes the instance UI accessible from outside of the local network by enabling your Home Assistant Cloud connection.",
      "fields": {}
    },
    "remote_disconnect": {
      "name": "Disable remote access",
      "description": "Disconnects the instance UI from Home Assistant Cloud. This disables access to it from outside your local network.",
      "fields": {}
    }
  },
  "ffmpeg": {
    "start": {
      "name": "Start",
      "description": "Sends a start command to a ffmpeg based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will start. Platform dependent."
        }
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Sends a stop command to a ffmpeg based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will stop. Platform dependent."
        }
      }
    },
    "restart": {
      "name": "Restart",
      "description": "Sends a restart command to a ffmpeg based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will restart. Platform dependent."
        }
      }
    }
  },
  "tts": {
    "speak": {
      "name": "Speak",
      "description": "Speaks something using text-to-speech on a media player.",
      "fields": {
        "media_player_entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Media player entity",
          "description": "Media players to play the message."
        },
        "message": {
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "The text you want to convert into speech so that you can listen to it on your device."
        },
        "cache": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cache",
          "description": "Stores this message locally so that when the text is requested again, the output can be produced more quickly."
        },
        "language": {
          "example": "ru",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language to use for speech generation."
        },
        "options": {
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          },
          "name": "Options",
          "description": "A dictionary containing integration-specific options."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["tts"]
          }
        ]
      }
    },
    "clear_cache": {
      "name": "Clear TTS cache",
      "description": "Removes all cached text-to-speech files and purges the memory.",
      "fields": {}
    },
    "cloud_say": {
      "name": "Say a TTS message with cloud",
      "description": "Say something using text-to-speech on a media player with cloud.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          }
        },
        "message": {
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "cache": {
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "language": {
          "example": "ru",
          "selector": {
            "text": null
          }
        },
        "options": {
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "conversation": {
    "process": {
      "name": "Process",
      "description": "Launches a conversation from a transcribed text.",
      "fields": {
        "text": {
          "example": "Turn all lights on",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Text",
          "description": "Transcribed text input."
        },
        "language": {
          "example": "NL",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language of text. Defaults to server language."
        },
        "agent_id": {
          "example": "homeassistant",
          "selector": {
            "conversation_agent": null
          },
          "name": "Agent",
          "description": "Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands."
        },
        "conversation_id": {
          "example": "my_conversation_1",
          "selector": {
            "text": null
          },
          "name": "Conversation ID",
          "description": "ID of the conversation, to be able to continue a previous conversation"
        }
      },
      "response": {
        "optional": true
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads the intent configuration.",
      "fields": {
        "language": {
          "example": "NL",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language to clear cached intents for. Defaults to server language."
        },
        "agent_id": {
          "example": "homeassistant",
          "selector": {
            "conversation_agent": null
          },
          "name": "Agent",
          "description": "Conversation agent to reload."
        }
      }
    }
  },
  "scene": {
    "reload": {
      "name": "Reload",
      "description": "Reloads the scenes from the YAML-configuration.",
      "fields": {}
    },
    "apply": {
      "name": "Apply",
      "description": "Activates a scene with configuration.",
      "fields": {
        "entities": {
          "required": true,
          "example": "light.kitchen: \"on\"\nlight.ceiling:\n  state: \"on\"\n  brightness: 80\n",
          "selector": {
            "object": null
          },
          "name": "Entities state",
          "description": "List of entities and their target state."
        },
        "transition": {
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Time it takes the devices to transition into the states defined in the scene."
        }
      }
    },
    "create": {
      "name": "Create",
      "description": "Creates a new scene.",
      "fields": {
        "scene_id": {
          "required": true,
          "example": "all_lights",
          "selector": {
            "text": null
          },
          "name": "Scene entity ID",
          "description": "The entity ID of the new scene."
        },
        "entities": {
          "advanced": true,
          "example": "light.tv_back_light: \"on\"\nlight.ceiling:\n  state: \"on\"\n  brightness: 200\n",
          "selector": {
            "object": null
          },
          "name": "Entity states",
          "description": "List of entities and their target state. If your entities are already in the target state right now, use 'Entities snapshot' instead."
        },
        "snapshot_entities": {
          "example": "- light.ceiling\n- light.kitchen\n",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities snapshot",
          "description": "List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine 'Entities snapshot' with 'Entity states'."
        }
      }
    },
    "delete": {
      "name": "Delete",
      "description": "Deletes a dynamically created scene.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "homeassistant",
            "domain": ["scene"]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Activate",
      "description": "Activates a scene.",
      "fields": {
        "transition": {
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Time it takes the devices to transition into the states defined in the scene."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["scene"]
          }
        ]
      }
    }
  },
  "backup": {
    "create_automatic": {
      "name": "Create automatic backup",
      "description": "Creates a new backup with automatic backup settings.",
      "fields": {}
    }
  },
  "input_button": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "press": {
      "name": "Press",
      "description": "Mimics the physical button press on the device.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["input_button"]
          }
        ]
      }
    }
  },
  "zone": {
    "reload": {
      "name": "Reload",
      "description": "Reloads zones from the YAML-configuration.",
      "fields": {}
    }
  },
  "group": {
    "reload": {
      "name": "Reload",
      "description": "Reloads group configuration, entities, and notify services from YAML-configuration.",
      "fields": {}
    },
    "set": {
      "name": "Set",
      "description": "Creates/Updates a group.",
      "fields": {
        "object_id": {
          "required": true,
          "example": "test_group",
          "selector": {
            "text": null
          },
          "name": "Object ID",
          "description": "Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]."
        },
        "name": {
          "example": "My test group",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Name of the group."
        },
        "icon": {
          "example": "mdi:camera",
          "selector": {
            "icon": null
          },
          "name": "Icon",
          "description": "Name of the icon for the group."
        },
        "entities": {
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities",
          "description": "List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`."
        },
        "add_entities": {
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Add entities",
          "description": "List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`."
        },
        "remove_entities": {
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Remove entities",
          "description": "List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`."
        },
        "all": {
          "selector": {
            "boolean": null
          },
          "name": "All",
          "description": "Enable this option if the group should only be used when all entities are in state `on`."
        }
      }
    },
    "remove": {
      "name": "Remove",
      "description": "Removes a group.",
      "fields": {
        "object_id": {
          "required": true,
          "example": "test_group",
          "selector": {
            "object": null
          },
          "name": "Object ID",
          "description": "Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]."
        }
      }
    }
  },
  "input_select": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "select_first": {
      "name": "First",
      "description": "Selects the first option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["input_select"]
          }
        ]
      }
    },
    "select_last": {
      "name": "Last",
      "description": "Selects the last option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["input_select"]
          }
        ]
      }
    },
    "select_next": {
      "name": "Next",
      "description": "Selects the next option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first option on the list."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["input_select"]
          }
        ]
      }
    },
    "select_option": {
      "name": "Select",
      "description": "Selects an option.",
      "fields": {
        "option": {
          "required": true,
          "example": "\"Item A\"",
          "selector": {
            "text": null
          },
          "name": "Option",
          "description": "Option to be selected."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["input_select"]
          }
        ]
      }
    },
    "select_previous": {
      "name": "Previous",
      "description": "Selects the previous option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the first to the last option on the list."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["input_select"]
          }
        ]
      }
    },
    "set_options": {
      "name": "Set options",
      "description": "Sets the options.",
      "fields": {
        "options": {
          "required": true,
          "example": "[\"Item A\", \"Item B\", \"Item C\"]",
          "selector": {
            "text": {
              "multiple": true
            }
          },
          "name": "Options",
          "description": "List of options."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["input_select"]
          }
        ]
      }
    }
  },
  "logbook": {
    "log": {
      "name": "Log",
      "description": "Creates a custom entry in the logbook.",
      "fields": {
        "name": {
          "required": true,
          "example": "Kitchen",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Custom name for an entity, can be referenced using the 'Entity ID' field."
        },
        "message": {
          "required": true,
          "example": "is being used",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message of the logbook entry."
        },
        "entity_id": {
          "selector": {
            "entity": null
          },
          "name": "Entity ID",
          "description": "Entity to reference in the logbook entry."
        },
        "domain": {
          "example": "light",
          "selector": {
            "text": null
          },
          "name": "Domain",
          "description": "Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry."
        }
      }
    }
  },
  "timer": {
    "reload": {
      "name": "Reload",
      "description": "Reloads timers from the YAML-configuration.",
      "fields": {}
    },
    "start": {
      "name": "Start",
      "description": "Starts a timer or restarts it with a provided duration.",
      "fields": {
        "duration": {
          "example": "00:01:00 or 60",
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Custom duration to restart the timer with."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["timer"]
          }
        ]
      }
    },
    "pause": {
      "name": "Pause",
      "description": "Pauses a running timer, retaining the remaining duration for later continuation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["timer"]
          }
        ]
      }
    },
    "cancel": {
      "name": "Cancel",
      "description": "Resets a timer's duration to the last known initial value without firing the timer finished event.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["timer"]
          }
        ]
      }
    },
    "finish": {
      "name": "Finish",
      "description": "Finishes a running timer earlier than scheduled.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["timer"]
          }
        ]
      }
    },
    "change": {
      "name": "Change",
      "description": "Changes a timer by adding or subtracting a given duration.",
      "fields": {
        "duration": {
          "default": 0,
          "required": true,
          "example": "00:01:00, 60 or -60",
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Duration to add to or subtract from the running timer."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["timer"]
          }
        ]
      }
    }
  },
  "input_number": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854776000,
              "step": 0.001,
              "mode": "box"
            }
          },
          "name": "Value",
          "description": "The target value."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["input_number"]
          }
        ]
      }
    },
    "increment": {
      "name": "Increment",
      "description": "Increments the current value by 1 step.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["input_number"]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrement",
      "description": "Decrements the current value by 1 step.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["input_number"]
          }
        ]
      }
    }
  },
  "input_boolean": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the helper.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["input_boolean"]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the helper.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["input_boolean"]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the helper on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["input_boolean"]
          }
        ]
      }
    }
  },
  "assist_satellite": {
    "announce": {
      "name": "Announce",
      "description": "Lets a satellite announce a message.",
      "fields": {
        "message": {
          "required": false,
          "example": "Time to wake up!",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "The message to announce."
        },
        "media_id": {
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Media ID",
          "description": "The media ID to announce instead of using text-to-speech."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["assist_satellite"],
            "supported_features": [1]
          }
        ]
      }
    },
    "start_conversation": {
      "name": "Start conversation",
      "description": "Starts a conversation from a satellite.",
      "fields": {
        "start_message": {
          "required": false,
          "example": "You left the lights on in the living room. Turn them off?",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "The message to start with."
        },
        "start_media_id": {
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Media ID",
          "description": "The media ID to start with instead of using text-to-speech."
        },
        "extra_system_prompt": {
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Extra system prompt",
          "description": "Provide background information to the AI about the request."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["assist_satellite"],
            "supported_features": [2]
          }
        ]
      }
    }
  },
  "switch": {
    "turn_off": {
      "name": "Turn off",
      "description": "Turns a switch off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["switch"]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns a switch on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["switch"]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a switch on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["switch"]
          }
        ]
      }
    }
  },
  "channels": {
    "seek_forward": {
      "name": "Seek forward",
      "description": "Seeks forward by a set number of seconds.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "channels",
            "domain": ["media_player"]
          }
        ]
      }
    },
    "seek_backward": {
      "name": "Seek backward",
      "description": "Seeks backward by a set number of seconds.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "channels",
            "domain": ["media_player"]
          }
        ]
      }
    },
    "seek_by": {
      "name": "Seek by",
      "description": "Seeks by an inputted number of seconds.",
      "fields": {
        "seconds": {
          "required": true,
          "selector": {
            "number": {
              "min": -3600,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Seconds",
          "description": "Number of seconds to seek by. Negative numbers seek backwards."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "channels",
            "domain": ["media_player"]
          }
        ]
      }
    }
  },
  "media_player": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the power of the media player.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [128]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the power of the media player.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [256]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a media player on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [384]
          }
        ]
      }
    },
    "volume_up": {
      "name": "Turn up volume",
      "description": "Turns up the volume.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [4, 1024]
          }
        ]
      }
    },
    "volume_down": {
      "name": "Turn down volume",
      "description": "Turns down the volume.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [4, 1024]
          }
        ]
      }
    },
    "media_play_pause": {
      "name": "Play/Pause",
      "description": "Toggles play/pause.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [16385]
          }
        ]
      }
    },
    "media_play": {
      "name": "Play",
      "description": "Starts playing.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [16384]
          }
        ]
      }
    },
    "media_pause": {
      "name": "Pause",
      "description": "Pauses.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [1]
          }
        ]
      }
    },
    "media_stop": {
      "name": "Stop",
      "description": "Stops playing.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [4096]
          }
        ]
      }
    },
    "media_next_track": {
      "name": "Next",
      "description": "Selects the next track.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [32]
          }
        ]
      }
    },
    "media_previous_track": {
      "name": "Previous",
      "description": "Selects the previous track.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [16]
          }
        ]
      }
    },
    "clear_playlist": {
      "name": "Clear playlist",
      "description": "Removes all items from the playlist.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [8192]
          }
        ]
      }
    },
    "volume_set": {
      "name": "Set volume",
      "description": "Sets the volume level.",
      "fields": {
        "volume_level": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.01
            }
          },
          "name": "Level",
          "description": "The volume. 0 is inaudible, 1 is the maximum volume."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [4]
          }
        ]
      }
    },
    "volume_mute": {
      "name": "Mute/unmute volume",
      "description": "Mutes or unmutes the media player.",
      "fields": {
        "is_volume_muted": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Muted",
          "description": "Defines whether or not it is muted."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [8]
          }
        ]
      }
    },
    "media_seek": {
      "name": "Seek",
      "description": "Allows you to go to a different part of the media that is currently playing.",
      "fields": {
        "seek_position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854776000,
              "step": 0.01,
              "mode": "box"
            }
          },
          "name": "Position",
          "description": "Target position in the currently playing media. The format is platform dependent."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [2]
          }
        ]
      }
    },
    "join": {
      "name": "Join",
      "description": "Groups media players together for synchronous playback. Only works on supported multiroom audio systems.",
      "fields": {
        "group_members": {
          "required": true,
          "example": "- media_player.multiroom_player2\n- media_player.multiroom_player3\n",
          "selector": {
            "entity": {
              "multiple": true,
              "domain": "media_player"
            }
          },
          "name": "Group members",
          "description": "The players which will be synced with the playback specified in 'Targets'."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [524288]
          }
        ]
      }
    },
    "select_source": {
      "name": "Select source",
      "description": "Sends the media player the command to change input source.",
      "fields": {
        "source": {
          "required": true,
          "example": "video1",
          "selector": {
            "text": null
          },
          "name": "Source",
          "description": "Name of the source to switch to. Platform dependent."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [2048]
          }
        ]
      }
    },
    "select_sound_mode": {
      "name": "Select sound mode",
      "description": "Selects a specific sound mode.",
      "fields": {
        "sound_mode": {
          "example": "Music",
          "selector": {
            "text": null
          },
          "name": "Sound mode",
          "description": "Name of the sound mode to switch to."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [65536]
          }
        ]
      }
    },
    "play_media": {
      "name": "Play media",
      "description": "Starts playing specified media.",
      "fields": {
        "media_content_id": {
          "required": true,
          "example": "https://home-assistant.io/images/cast/splash.png",
          "selector": {
            "text": null
          },
          "name": "Content ID",
          "description": "The ID of the content to play. Platform dependent."
        },
        "media_content_type": {
          "required": true,
          "example": "music",
          "selector": {
            "text": null
          },
          "name": "Content type",
          "description": "The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist."
        },
        "enqueue": {
          "filter": {
            "supported_features": [2097152]
          },
          "required": false,
          "selector": {
            "select": {
              "options": ["play", "next", "add", "replace"],
              "translation_key": "enqueue"
            }
          },
          "name": "Enqueue",
          "description": "If the content should be played now or be added to the queue."
        },
        "announce": {
          "filter": {
            "supported_features": [1048576]
          },
          "required": false,
          "example": "true",
          "selector": {
            "boolean": null
          },
          "name": "Announce",
          "description": "If the media should be played as an announcement."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [512]
          }
        ]
      }
    },
    "browse_media": {
      "name": "Browse media",
      "description": "Browses the available media.",
      "fields": {
        "media_content_type": {
          "required": false,
          "example": "music",
          "selector": {
            "text": null
          },
          "name": "Content type",
          "description": "The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist."
        },
        "media_content_id": {
          "required": false,
          "example": "A:ALBUMARTIST/Beatles",
          "selector": {
            "text": null
          },
          "name": "Content ID",
          "description": "The ID of the content to browse. Integration dependent."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["media_player"]
          }
        ]
      },
      "response": {
        "optional": false
      }
    },
    "shuffle_set": {
      "name": "Set shuffle",
      "description": "Enables or disables the shuffle mode.",
      "fields": {
        "shuffle": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Shuffle mode",
          "description": "Whether the media should be played in randomized order or not."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [32768]
          }
        ]
      }
    },
    "unjoin": {
      "name": "Unjoin",
      "description": "Removes the player from a group. Only works on platforms which support player groups.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [524288]
          }
        ]
      }
    },
    "repeat_set": {
      "name": "Set repeat",
      "description": "Sets the repeat mode.",
      "fields": {
        "repeat": {
          "required": true,
          "selector": {
            "select": {
              "options": ["off", "all", "one"],
              "translation_key": "repeat"
            }
          },
          "name": "Repeat mode",
          "description": "Whether the media (one or all) should be played in a loop or not."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "supported_features": [262144]
          }
        ]
      }
    }
  },
  "camera": {
    "enable_motion_detection": {
      "name": "Enable motion detection",
      "description": "Enables the motion detection.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["camera"]
          }
        ]
      }
    },
    "disable_motion_detection": {
      "name": "Disable motion detection",
      "description": "Disables the motion detection.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["camera"]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["camera"]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["camera"]
          }
        ]
      }
    },
    "snapshot": {
      "name": "Take snapshot",
      "description": "Takes a snapshot from a camera.",
      "fields": {
        "filename": {
          "required": true,
          "example": "/tmp/snapshot_{{ entity_id.name }}.jpg",
          "selector": {
            "text": null
          },
          "name": "Filename",
          "description": "Full path to filename."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["camera"]
          }
        ]
      }
    },
    "play_stream": {
      "name": "Play stream",
      "description": "Plays the camera stream on a supported media player.",
      "fields": {
        "media_player": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Media player",
          "description": "Media players to stream to."
        },
        "format": {
          "default": "hls",
          "selector": {
            "select": {
              "options": ["hls"]
            }
          },
          "name": "Format",
          "description": "Stream format supported by the media player."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["camera"]
          }
        ]
      }
    },
    "record": {
      "name": "Record",
      "description": "Creates a recording of a live camera feed.",
      "fields": {
        "filename": {
          "required": true,
          "example": "/tmp/snapshot_{{ entity_id.name }}.mp4",
          "selector": {
            "text": null
          },
          "name": "Filename",
          "description": "Full path to filename. Must be mp4."
        },
        "duration": {
          "default": 30,
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "Planned duration of the recording. The actual duration may vary."
        },
        "lookback": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Lookback",
          "description": "Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["camera"]
          }
        ]
      }
    }
  },
  "huesyncbox": {
    "set_bridge": {
      "name": "Set bridge",
      "description": "Set the bridge to be used by the Philips Hue Play HDMI Syncbox. Keep in mind that changing the bridge by the box takes a while (about 15 seconds it seems). After the bridge has changed you might need to select the `entertainment_area` if connectionstate is `invalidgroup` instead of `connected`.",
      "fields": {
        "bridge_id": {
          "example": "001788FFFE000000",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Bridge ID",
          "description": "ID of the bridge. A hexadecimal code of 16 characters."
        },
        "bridge_username": {
          "example": "WB9xS1t0Baw-8ZqYKMcEhOaKRU42E84-NZBXwcIL",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Username",
          "description": "Username (a.k.a. application key) valid for the bridge. A long code of random characters."
        },
        "bridge_clientkey": {
          "example": "00112233445566778899AABBCCDDEEFF",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Clientkey",
          "description": "Clientkey that belongs with the username. A hexadecimal code of 32 characters."
        }
      },
      "target": {
        "device": [
          {
            "integration": "huesyncbox"
          }
        ],
        "entity": [
          {
            "integration": "huesyncbox"
          }
        ]
      }
    },
    "set_sync_state": {
      "name": "Set light sync state",
      "description": "Control the complete light sync state of the Philips Hue Play HDMI Syncbox with one call.",
      "fields": {
        "power": {
          "example": true,
          "selector": {
            "boolean": null
          },
          "name": "Power",
          "description": "Turn the box on or off."
        },
        "sync": {
          "example": true,
          "selector": {
            "boolean": null
          },
          "name": "Light sync",
          "description": "Set light sync state on or off. Setting this to on will also turn on the box."
        },
        "brightness": {
          "example": 42,
          "selector": {
            "number": {
              "min": 1,
              "max": 100,
              "step": 1,
              "mode": "slider"
            }
          },
          "name": "Brightness",
          "description": "Brightness value to set."
        },
        "intensity": {
          "example": "high",
          "selector": {
            "select": {
              "translation_key": "intensities",
              "options": ["subtle", "moderate", "high", "intense"]
            }
          },
          "name": "Intensity",
          "description": "Intensity to set."
        },
        "mode": {
          "example": "video",
          "selector": {
            "select": {
              "translation_key": "modes",
              "options": ["video", "music", "game"]
            }
          },
          "name": "Mode",
          "description": "Mode to set. Setting the mode will also turn on the box and start light sync."
        },
        "input": {
          "example": "input1",
          "selector": {
            "select": {
              "translation_key": "inputs",
              "options": ["input1", "input2", "input3", "input4"]
            }
          },
          "name": "Input",
          "description": "Input to select."
        },
        "entertainment_area": {
          "example": "TV Area",
          "selector": {
            "text": null
          },
          "name": "Entertainment area",
          "description": "Entertainment area to select. Name must match _exactly_"
        }
      },
      "target": {
        "device": [
          {
            "integration": "huesyncbox"
          }
        ],
        "entity": [
          {
            "integration": "huesyncbox"
          }
        ]
      }
    }
  },
  "schedule": {
    "reload": {
      "name": "Reload",
      "description": "Reloads schedules from the YAML-configuration.",
      "fields": {}
    },
    "get_schedule": {
      "name": "Get schedule",
      "description": "Retrieves the configured time ranges of one or multiple schedules.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["schedule"]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "mqtt": {
    "publish": {
      "name": "Publish",
      "description": "Publishes a message to an MQTT topic.",
      "fields": {
        "topic": {
          "required": true,
          "example": "/homeassistant/hello",
          "selector": {
            "text": null
          },
          "name": "Topic",
          "description": "Topic to publish to."
        },
        "payload": {
          "example": "The temperature is {{ states('sensor.temperature') }}",
          "selector": {
            "template": null
          },
          "name": "Payload",
          "description": "The payload to publish. Publishes an empty message if not provided."
        },
        "evaluate_payload": {
          "advanced": true,
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Evaluate payload",
          "description": "When `payload` is a Python bytes literal, evaluate the bytes literal and publish the raw data."
        },
        "qos": {
          "advanced": true,
          "default": 0,
          "selector": {
            "select": {
              "options": ["0", "1", "2"]
            }
          },
          "name": "QoS",
          "description": "Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once."
        },
        "retain": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Retain",
          "description": "If the message should have the retain flag set. If set, the broker stores the most recent message on a topic."
        }
      }
    },
    "dump": {
      "name": "Export",
      "description": "Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.",
      "fields": {
        "topic": {
          "example": "OpenZWave/#",
          "selector": {
            "text": null
          },
          "name": "Topic",
          "description": "Topic to listen to."
        },
        "duration": {
          "default": 5,
          "selector": {
            "number": {
              "min": 1,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "How long we should listen for messages in seconds."
        }
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads MQTT entities from the YAML-configuration.",
      "fields": {}
    }
  },
  "unifi": {
    "reconnect_client": {
      "name": "Reconnect wireless client",
      "description": "Tries to get wireless client to reconnect to UniFi Network.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "unifi"
            }
          },
          "name": "Device",
          "description": "The device that should be forced to reconnect to the wireless network."
        }
      }
    },
    "remove_clients": {
      "name": "Remove clients from the UniFi Network",
      "description": "Cleans up clients that has only been associated with the controller for a short period of time.",
      "fields": {}
    }
  },
  "notify": {
    "send_message": {
      "name": "Send a notification message",
      "description": "Sends a notification message.",
      "fields": {
        "message": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Your notification message."
        },
        "title": {
          "required": false,
          "selector": {
            "text": null
          },
          "filter": {
            "supported_features": [1]
          },
          "name": "Title",
          "description": "Title for your notification message."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["notify"]
          }
        ]
      }
    },
    "persistent_notification": {
      "name": "Send a persistent notification",
      "description": "Sends a notification that is visible in the notifications panel.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message body of the notification."
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          },
          "name": "Title",
          "description": "Title of the notification."
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          },
          "name": "Data",
          "description": "Some integrations provide extended functionality via this field. For more information, refer to the integration documentation."
        }
      }
    },
    "reactive_inc": {
      "name": "Send a notification with reactive_inc",
      "description": "Sends a notification message using the reactive_inc service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_ulrike_pixel_6": {
      "name": "Send a notification via mobile_app_ulrike_pixel_6",
      "description": "Sends a notification message using the mobile_app_ulrike_pixel_6 integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_effie_pixel_8": {
      "name": "Send a notification via mobile_app_effie_pixel_8",
      "description": "Sends a notification message using the mobile_app_effie_pixel_8 integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_its_an_flippi": {
      "name": "Send a notification via mobile_app_its_an_flippi",
      "description": "Sends a notification message using the mobile_app_its_an_flippi integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_its_an_watchy": {
      "name": "Send a notification via mobile_app_its_an_watchy",
      "description": "Sends a notification message using the mobile_app_its_an_watchy integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_sm_g981u1": {
      "name": "Send a notification via mobile_app_sm_g981u1",
      "description": "Sends a notification message using the mobile_app_sm_g981u1 integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_magicdrawingpad": {
      "name": "Send a notification via mobile_app_magicdrawingpad",
      "description": "Sends a notification message using the mobile_app_magicdrawingpad integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_pixel_9_pro": {
      "name": "Send a notification via mobile_app_pixel_9_pro",
      "description": "Sends a notification message using the mobile_app_pixel_9_pro integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_pixel_tablet": {
      "name": "Send a notification via mobile_app_pixel_tablet",
      "description": "Sends a notification message using the mobile_app_pixel_tablet integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_sm_s931b": {
      "name": "Send a notification via mobile_app_sm_s931b",
      "description": "Sends a notification message using the mobile_app_sm_s931b integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "notify": {
      "name": "Send a notification with notify",
      "description": "Sends a notification message using the notify service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "nvidia_shield": {
      "name": "Send a notification with nvidia_shield",
      "description": "Sends a notification message using the nvidia_shield service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "wake_on_lan": {
    "send_magic_packet": {
      "name": "Send magic packet",
      "description": "Sends a 'magic packet' to wake up a device with 'Wake-On-LAN' capabilities.",
      "fields": {
        "mac": {
          "required": true,
          "example": "aa:bb:cc:dd:ee:ff",
          "selector": {
            "text": null
          },
          "name": "MAC address",
          "description": "MAC address of the device to wake up."
        },
        "broadcast_address": {
          "example": "192.168.255.255",
          "selector": {
            "text": null
          },
          "name": "Broadcast address",
          "description": "The IP address of the host to send the magic packet to. Defaults to `255.255.255.255` and is normally not changed."
        },
        "broadcast_port": {
          "default": 9,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535,
              "mode": "box"
            }
          },
          "name": "Broadcast port",
          "description": "The port to send the magic packet to. Defaults to `9` and is normally not changed."
        }
      }
    }
  },
  "button": {
    "press": {
      "name": "Press",
      "description": "Press the button entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["button"]
          }
        ]
      }
    }
  },
  "climate": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns climate device on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["climate"],
            "supported_features": [256]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns climate device off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["climate"],
            "supported_features": [128]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles climate device, from on to off, or off to on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["climate"],
            "supported_features": [128, 256]
          }
        ]
      }
    },
    "set_hvac_mode": {
      "name": "Set HVAC mode",
      "description": "Sets HVAC operation mode.",
      "fields": {
        "hvac_mode": {
          "selector": {
            "select": {
              "options": [
                "off",
                "auto",
                "cool",
                "dry",
                "fan_only",
                "heat_cool",
                "heat"
              ],
              "translation_key": "hvac_mode"
            }
          },
          "name": "HVAC mode",
          "description": "HVAC operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["climate"]
          }
        ]
      }
    },
    "set_preset_mode": {
      "name": "Set preset mode",
      "description": "Sets preset mode.",
      "fields": {
        "preset_mode": {
          "required": true,
          "example": "away",
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["climate"],
            "supported_features": [16]
          }
        ]
      }
    },
    "set_aux_heat": {
      "name": "Turn on/off auxiliary heater",
      "description": "Turns auxiliary heater on/off.",
      "fields": {
        "aux_heat": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Auxiliary heating",
          "description": "New value of auxiliary heater."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["climate"],
            "supported_features": [64]
          }
        ]
      }
    },
    "set_temperature": {
      "name": "Set target temperature",
      "description": "Sets the temperature setpoint.",
      "fields": {
        "temperature": {
          "filter": {
            "supported_features": [1]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Target temperature",
          "description": "The temperature setpoint."
        },
        "target_temp_high": {
          "filter": {
            "supported_features": [2]
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Upper target temperature",
          "description": "The max temperature setpoint."
        },
        "target_temp_low": {
          "filter": {
            "supported_features": [2]
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Lower target temperature",
          "description": "The min temperature setpoint."
        },
        "hvac_mode": {
          "selector": {
            "select": {
              "options": [
                "off",
                "auto",
                "cool",
                "dry",
                "fan_only",
                "heat_cool",
                "heat"
              ],
              "translation_key": "hvac_mode"
            }
          },
          "name": "HVAC mode",
          "description": "HVAC operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["climate"],
            "supported_features": [1, 2]
          }
        ]
      }
    },
    "set_humidity": {
      "name": "Set target humidity",
      "description": "Sets target humidity.",
      "fields": {
        "humidity": {
          "required": true,
          "selector": {
            "number": {
              "min": 30,
              "max": 99,
              "unit_of_measurement": "%"
            }
          },
          "name": "Humidity",
          "description": "Target humidity."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["climate"],
            "supported_features": [4]
          }
        ]
      }
    },
    "set_fan_mode": {
      "name": "Set fan mode",
      "description": "Sets fan operation mode.",
      "fields": {
        "fan_mode": {
          "required": true,
          "example": "low",
          "selector": {
            "text": null
          },
          "name": "Fan mode",
          "description": "Fan operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["climate"],
            "supported_features": [8]
          }
        ]
      }
    },
    "set_swing_mode": {
      "name": "Set swing mode",
      "description": "Sets swing operation mode.",
      "fields": {
        "swing_mode": {
          "required": true,
          "example": "on",
          "selector": {
            "text": null
          },
          "name": "Swing mode",
          "description": "Swing operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["climate"],
            "supported_features": [32]
          }
        ]
      }
    },
    "set_swing_horizontal_mode": {
      "name": "Set horizontal swing mode",
      "description": "Sets horizontal swing operation mode.",
      "fields": {
        "swing_horizontal_mode": {
          "required": true,
          "example": "on",
          "selector": {
            "text": null
          },
          "name": "Horizontal swing mode",
          "description": "Horizontal swing operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["climate"],
            "supported_features": [512]
          }
        ]
      }
    }
  },
  "cover": {
    "open_cover": {
      "name": "Open",
      "description": "Opens a cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["cover"],
            "supported_features": [1]
          }
        ]
      }
    },
    "close_cover": {
      "name": "Close",
      "description": "Closes a cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["cover"],
            "supported_features": [2]
          }
        ]
      }
    },
    "set_cover_position": {
      "name": "Set position",
      "description": "Moves a cover to a specific position.",
      "fields": {
        "position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Position",
          "description": "Target position."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["cover"],
            "supported_features": [4]
          }
        ]
      }
    },
    "stop_cover": {
      "name": "Stop",
      "description": "Stops the cover movement.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["cover"],
            "supported_features": [8]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a cover open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["cover"],
            "supported_features": [3]
          }
        ]
      }
    },
    "open_cover_tilt": {
      "name": "Open tilt",
      "description": "Tilts a cover open.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["cover"],
            "supported_features": [16]
          }
        ]
      }
    },
    "close_cover_tilt": {
      "name": "Close tilt",
      "description": "Tilts a cover to close.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["cover"],
            "supported_features": [32]
          }
        ]
      }
    },
    "stop_cover_tilt": {
      "name": "Stop tilt",
      "description": "Stops a tilting cover movement.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["cover"],
            "supported_features": [64]
          }
        ]
      }
    },
    "set_cover_tilt_position": {
      "name": "Set tilt position",
      "description": "Moves a cover tilt to a specific position.",
      "fields": {
        "tilt_position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Tilt position",
          "description": "Target tilt positition."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["cover"],
            "supported_features": [128]
          }
        ]
      }
    },
    "toggle_cover_tilt": {
      "name": "Toggle tilt",
      "description": "Toggles a cover tilt open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["cover"],
            "supported_features": [48]
          }
        ]
      }
    }
  },
  "fan": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns fan on.",
      "fields": {
        "percentage": {
          "filter": {
            "supported_features": [1]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Percentage",
          "description": "Speed of the fan."
        },
        "preset_mode": {
          "example": "auto",
          "filter": {
            "supported_features": [8]
          },
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset fan mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["fan"],
            "supported_features": [32]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns fan off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["fan"],
            "supported_features": [16]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a fan on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["fan"]
          }
        ]
      }
    },
    "increase_speed": {
      "name": "Increase speed",
      "description": "Increases the speed of a fan.",
      "fields": {
        "percentage_step": {
          "advanced": true,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Increment",
          "description": "Percentage step by which the speed should be increased."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["fan"],
            "supported_features": [1]
          }
        ]
      }
    },
    "decrease_speed": {
      "name": "Decrease speed",
      "description": "Decreases the speed of a fan.",
      "fields": {
        "percentage_step": {
          "advanced": true,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Decrement",
          "description": "Percentage step by which the speed should be decreased."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["fan"],
            "supported_features": [1]
          }
        ]
      }
    },
    "oscillate": {
      "name": "Oscillate",
      "description": "Controls the oscillation of a fan.",
      "fields": {
        "oscillating": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Oscillating",
          "description": "Turns oscillation on/off."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["fan"],
            "supported_features": [2]
          }
        ]
      }
    },
    "set_direction": {
      "name": "Set direction",
      "description": "Sets a fan's rotation direction.",
      "fields": {
        "direction": {
          "required": true,
          "selector": {
            "select": {
              "options": ["forward", "reverse"],
              "translation_key": "direction"
            }
          },
          "name": "Direction",
          "description": "Direction of the fan rotation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["fan"],
            "supported_features": [4]
          }
        ]
      }
    },
    "set_percentage": {
      "name": "Set speed",
      "description": "Sets the speed of a fan.",
      "fields": {
        "percentage": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Percentage",
          "description": "Speed of the fan."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["fan"],
            "supported_features": [1]
          }
        ]
      }
    },
    "set_preset_mode": {
      "name": "Set preset mode",
      "description": "Sets preset fan mode.",
      "fields": {
        "preset_mode": {
          "required": true,
          "example": "auto",
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset fan mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["fan"],
            "supported_features": [8]
          }
        ]
      }
    }
  },
  "light": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on one or more lights and adjusts their properties, even when they are turned on already.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [32]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "rgb_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": ["hs", "xy", "rgb", "rgbw", "rgbww"]
            }
          },
          "example": "[255, 100, 100]",
          "selector": {
            "color_rgb": null
          },
          "name": "Color",
          "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue."
        },
        "kelvin": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "color_temp": {
              "unit": "kelvin",
              "min": 2000,
              "max": 6500
            }
          },
          "name": "Color temperature",
          "description": "Color temperature in Kelvin."
        },
        "brightness_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness."
        },
        "brightness_step_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": -100,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness step",
          "description": "Change brightness by a percentage."
        },
        "effect": {
          "filter": {
            "supported_features": [4]
          },
          "selector": {
            "text": null
          },
          "name": "Effect",
          "description": "Light effect."
        },
        "advanced_fields": {
          "collapsed": true,
          "fields": {
            "rgbw_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": ["hs", "xy", "rgb", "rgbw", "rgbww"]
                }
              },
              "example": "[255, 100, 100, 50]",
              "selector": {
                "object": null
              }
            },
            "rgbww_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": ["hs", "xy", "rgb", "rgbw", "rgbww"]
                }
              },
              "example": "[255, 100, 100, 50, 70]",
              "selector": {
                "object": null
              }
            },
            "color_name": {
              "filter": {
                "attribute": {
                  "supported_color_modes": ["hs", "xy", "rgb", "rgbw", "rgbww"]
                }
              },
              "selector": {
                "select": {
                  "translation_key": "color_name",
                  "options": [
                    "homeassistant",
                    "aliceblue",
                    "antiquewhite",
                    "aqua",
                    "aquamarine",
                    "azure",
                    "beige",
                    "bisque",
                    "blanchedalmond",
                    "blue",
                    "blueviolet",
                    "brown",
                    "burlywood",
                    "cadetblue",
                    "chartreuse",
                    "chocolate",
                    "coral",
                    "cornflowerblue",
                    "cornsilk",
                    "crimson",
                    "cyan",
                    "darkblue",
                    "darkcyan",
                    "darkgoldenrod",
                    "darkgray",
                    "darkgreen",
                    "darkgrey",
                    "darkkhaki",
                    "darkmagenta",
                    "darkolivegreen",
                    "darkorange",
                    "darkorchid",
                    "darkred",
                    "darksalmon",
                    "darkseagreen",
                    "darkslateblue",
                    "darkslategray",
                    "darkslategrey",
                    "darkturquoise",
                    "darkviolet",
                    "deeppink",
                    "deepskyblue",
                    "dimgray",
                    "dimgrey",
                    "dodgerblue",
                    "firebrick",
                    "floralwhite",
                    "forestgreen",
                    "fuchsia",
                    "gainsboro",
                    "ghostwhite",
                    "gold",
                    "goldenrod",
                    "gray",
                    "green",
                    "greenyellow",
                    "grey",
                    "honeydew",
                    "hotpink",
                    "indianred",
                    "indigo",
                    "ivory",
                    "khaki",
                    "lavender",
                    "lavenderblush",
                    "lawngreen",
                    "lemonchiffon",
                    "lightblue",
                    "lightcoral",
                    "lightcyan",
                    "lightgoldenrodyellow",
                    "lightgray",
                    "lightgreen",
                    "lightgrey",
                    "lightpink",
                    "lightsalmon",
                    "lightseagreen",
                    "lightskyblue",
                    "lightslategray",
                    "lightslategrey",
                    "lightsteelblue",
                    "lightyellow",
                    "lime",
                    "limegreen",
                    "linen",
                    "magenta",
                    "maroon",
                    "mediumaquamarine",
                    "mediumblue",
                    "mediumorchid",
                    "mediumpurple",
                    "mediumseagreen",
                    "mediumslateblue",
                    "mediumspringgreen",
                    "mediumturquoise",
                    "mediumvioletred",
                    "midnightblue",
                    "mintcream",
                    "mistyrose",
                    "moccasin",
                    "navajowhite",
                    "navy",
                    "navyblue",
                    "oldlace",
                    "olive",
                    "olivedrab",
                    "orange",
                    "orangered",
                    "orchid",
                    "palegoldenrod",
                    "palegreen",
                    "paleturquoise",
                    "palevioletred",
                    "papayawhip",
                    "peachpuff",
                    "peru",
                    "pink",
                    "plum",
                    "powderblue",
                    "purple",
                    "red",
                    "rosybrown",
                    "royalblue",
                    "saddlebrown",
                    "salmon",
                    "sandybrown",
                    "seagreen",
                    "seashell",
                    "sienna",
                    "silver",
                    "skyblue",
                    "slateblue",
                    "slategray",
                    "slategrey",
                    "snow",
                    "springgreen",
                    "steelblue",
                    "tan",
                    "teal",
                    "thistle",
                    "tomato",
                    "turquoise",
                    "violet",
                    "wheat",
                    "white",
                    "whitesmoke",
                    "yellow",
                    "yellowgreen"
                  ]
                }
              }
            },
            "hs_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": ["hs", "xy", "rgb", "rgbw", "rgbww"]
                }
              },
              "example": "[300, 70]",
              "selector": {
                "object": null
              }
            },
            "xy_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": ["hs", "xy", "rgb", "rgbw", "rgbww"]
                }
              },
              "example": "[0.52, 0.43]",
              "selector": {
                "object": null
              }
            },
            "color_temp": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "color_temp": {
                  "unit": "mired",
                  "min": 153,
                  "max": 500
                }
              }
            },
            "brightness": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "brightness",
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "number": {
                  "min": 0,
                  "max": 255
                }
              }
            },
            "brightness_step": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "brightness",
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "number": {
                  "min": -225,
                  "max": 255
                }
              }
            },
            "white": {
              "filter": {
                "attribute": {
                  "supported_color_modes": ["white"]
                }
              },
              "selector": {
                "constant": {
                  "value": true,
                  "label": "Enabled"
                }
              }
            },
            "profile": {
              "example": "relax",
              "selector": {
                "text": null
              }
            },
            "flash": {
              "filter": {
                "supported_features": [8]
              },
              "selector": {
                "select": {
                  "options": [
                    {
                      "label": "Long",
                      "value": "long"
                    },
                    {
                      "label": "Short",
                      "value": "short"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["light"]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off one or more lights.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [32]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "advanced_fields": {
          "collapsed": true,
          "fields": {
            "flash": {
              "filter": {
                "supported_features": [8]
              },
              "selector": {
                "select": {
                  "options": [
                    {
                      "label": "Long",
                      "value": "long"
                    },
                    {
                      "label": "Short",
                      "value": "short"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["light"]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles one or more lights, from on to off, or off to on, based on their current state.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [32]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "rgb_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": ["hs", "xy", "rgb", "rgbw", "rgbww"]
            }
          },
          "example": "[255, 100, 100]",
          "selector": {
            "color_rgb": null
          },
          "name": "Color",
          "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue."
        },
        "kelvin": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "color_temp": {
              "unit": "kelvin",
              "min": 2000,
              "max": 6500
            }
          },
          "name": "Color temperature",
          "description": "Color temperature in Kelvin."
        },
        "brightness_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness."
        },
        "effect": {
          "filter": {
            "supported_features": [4]
          },
          "selector": {
            "text": null
          },
          "name": "Effect",
          "description": "Light effect."
        },
        "advanced_fields": {
          "collapsed": true,
          "fields": {
            "rgbw_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": ["hs", "xy", "rgb", "rgbw", "rgbww"]
                }
              },
              "example": "[255, 100, 100, 50]",
              "selector": {
                "object": null
              }
            },
            "rgbww_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": ["hs", "xy", "rgb", "rgbw", "rgbww"]
                }
              },
              "example": "[255, 100, 100, 50, 70]",
              "selector": {
                "object": null
              }
            },
            "color_name": {
              "filter": {
                "attribute": {
                  "supported_color_modes": ["hs", "xy", "rgb", "rgbw", "rgbww"]
                }
              },
              "selector": {
                "select": {
                  "translation_key": "color_name",
                  "options": [
                    "homeassistant",
                    "aliceblue",
                    "antiquewhite",
                    "aqua",
                    "aquamarine",
                    "azure",
                    "beige",
                    "bisque",
                    "blanchedalmond",
                    "blue",
                    "blueviolet",
                    "brown",
                    "burlywood",
                    "cadetblue",
                    "chartreuse",
                    "chocolate",
                    "coral",
                    "cornflowerblue",
                    "cornsilk",
                    "crimson",
                    "cyan",
                    "darkblue",
                    "darkcyan",
                    "darkgoldenrod",
                    "darkgray",
                    "darkgreen",
                    "darkgrey",
                    "darkkhaki",
                    "darkmagenta",
                    "darkolivegreen",
                    "darkorange",
                    "darkorchid",
                    "darkred",
                    "darksalmon",
                    "darkseagreen",
                    "darkslateblue",
                    "darkslategray",
                    "darkslategrey",
                    "darkturquoise",
                    "darkviolet",
                    "deeppink",
                    "deepskyblue",
                    "dimgray",
                    "dimgrey",
                    "dodgerblue",
                    "firebrick",
                    "floralwhite",
                    "forestgreen",
                    "fuchsia",
                    "gainsboro",
                    "ghostwhite",
                    "gold",
                    "goldenrod",
                    "gray",
                    "green",
                    "greenyellow",
                    "grey",
                    "honeydew",
                    "hotpink",
                    "indianred",
                    "indigo",
                    "ivory",
                    "khaki",
                    "lavender",
                    "lavenderblush",
                    "lawngreen",
                    "lemonchiffon",
                    "lightblue",
                    "lightcoral",
                    "lightcyan",
                    "lightgoldenrodyellow",
                    "lightgray",
                    "lightgreen",
                    "lightgrey",
                    "lightpink",
                    "lightsalmon",
                    "lightseagreen",
                    "lightskyblue",
                    "lightslategray",
                    "lightslategrey",
                    "lightsteelblue",
                    "lightyellow",
                    "lime",
                    "limegreen",
                    "linen",
                    "magenta",
                    "maroon",
                    "mediumaquamarine",
                    "mediumblue",
                    "mediumorchid",
                    "mediumpurple",
                    "mediumseagreen",
                    "mediumslateblue",
                    "mediumspringgreen",
                    "mediumturquoise",
                    "mediumvioletred",
                    "midnightblue",
                    "mintcream",
                    "mistyrose",
                    "moccasin",
                    "navajowhite",
                    "navy",
                    "navyblue",
                    "oldlace",
                    "olive",
                    "olivedrab",
                    "orange",
                    "orangered",
                    "orchid",
                    "palegoldenrod",
                    "palegreen",
                    "paleturquoise",
                    "palevioletred",
                    "papayawhip",
                    "peachpuff",
                    "peru",
                    "pink",
                    "plum",
                    "powderblue",
                    "purple",
                    "red",
                    "rosybrown",
                    "royalblue",
                    "saddlebrown",
                    "salmon",
                    "sandybrown",
                    "seagreen",
                    "seashell",
                    "sienna",
                    "silver",
                    "skyblue",
                    "slateblue",
                    "slategray",
                    "slategrey",
                    "snow",
                    "springgreen",
                    "steelblue",
                    "tan",
                    "teal",
                    "thistle",
                    "tomato",
                    "turquoise",
                    "violet",
                    "wheat",
                    "white",
                    "whitesmoke",
                    "yellow",
                    "yellowgreen"
                  ]
                }
              }
            },
            "hs_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": ["hs", "xy", "rgb", "rgbw", "rgbww"]
                }
              },
              "example": "[300, 70]",
              "selector": {
                "object": null
              }
            },
            "xy_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": ["hs", "xy", "rgb", "rgbw", "rgbww"]
                }
              },
              "example": "[0.52, 0.43]",
              "selector": {
                "object": null
              }
            },
            "color_temp": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "color_temp": {
                  "unit": "mired",
                  "min": 153,
                  "max": 500
                }
              }
            },
            "brightness": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "brightness",
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "number": {
                  "min": 0,
                  "max": 255
                }
              }
            },
            "white": {
              "filter": {
                "attribute": {
                  "supported_color_modes": ["white"]
                }
              },
              "selector": {
                "constant": {
                  "value": true,
                  "label": "Enabled"
                }
              }
            },
            "profile": {
              "example": "relax",
              "selector": {
                "text": null
              }
            },
            "flash": {
              "filter": {
                "supported_features": [8]
              },
              "selector": {
                "select": {
                  "options": [
                    {
                      "label": "Long",
                      "value": "long"
                    },
                    {
                      "label": "Short",
                      "value": "short"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["light"]
          }
        ]
      }
    }
  },
  "lock": {
    "unlock": {
      "name": "Unlock",
      "description": "Unlocks a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to unlock the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["lock"]
          }
        ]
      }
    },
    "lock": {
      "name": "Lock",
      "description": "Locks a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to lock the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["lock"]
          }
        ]
      }
    },
    "open": {
      "name": "Open",
      "description": "Opens a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to open the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["lock"],
            "supported_features": [1]
          }
        ]
      }
    }
  },
  "number": {
    "set_value": {
      "name": "Set",
      "description": "Sets the value of a number.",
      "fields": {
        "value": {
          "example": 42,
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "The target value to set."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["number"]
          }
        ]
      }
    }
  },
  "select": {
    "select_first": {
      "name": "First",
      "description": "Selects the first option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["select"]
          }
        ]
      }
    },
    "select_last": {
      "name": "Last",
      "description": "Selects the last option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["select"]
          }
        ]
      }
    },
    "select_next": {
      "name": "Next",
      "description": "Selects the next option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["select"]
          }
        ]
      }
    },
    "select_option": {
      "name": "Select",
      "description": "Selects an option.",
      "fields": {
        "option": {
          "required": true,
          "example": "\"Item A\"",
          "selector": {
            "text": null
          },
          "name": "Option",
          "description": "Option to be selected."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["select"]
          }
        ]
      }
    },
    "select_previous": {
      "name": "Previous",
      "description": "Selects the previous option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the first to the last."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["select"]
          }
        ]
      }
    }
  },
  "vacuum": {
    "start": {
      "name": "Start",
      "description": "Starts or resumes the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["vacuum"],
            "supported_features": [8192]
          }
        ]
      }
    },
    "pause": {
      "name": "Pause",
      "description": "Pauses the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["vacuum"],
            "supported_features": [4]
          }
        ]
      }
    },
    "return_to_base": {
      "name": "Return to dock",
      "description": "Tells the vacuum cleaner to return to its dock.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["vacuum"],
            "supported_features": [16]
          }
        ]
      }
    },
    "clean_spot": {
      "name": "Clean spot",
      "description": "Tells the vacuum cleaner to do a spot clean-up.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["vacuum"]
          }
        ]
      }
    },
    "locate": {
      "name": "Locate",
      "description": "Locates the vacuum cleaner robot.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["vacuum"],
            "supported_features": [512]
          }
        ]
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Stops the current cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["vacuum"],
            "supported_features": [8]
          }
        ]
      }
    },
    "set_fan_speed": {
      "name": "Set fan speed",
      "description": "Sets the fan speed of the vacuum cleaner.",
      "fields": {
        "fan_speed": {
          "required": true,
          "example": "low",
          "selector": {
            "text": null
          },
          "name": "Fan speed",
          "description": "Fan speed. The value depends on the integration. Some integrations have speed steps, like 'medium'. Some use a percentage, between 0 and 100."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["vacuum"]
          }
        ]
      }
    },
    "send_command": {
      "name": "Send command",
      "description": "Sends a command to the vacuum cleaner.",
      "fields": {
        "command": {
          "required": true,
          "example": "set_dnd_timer",
          "selector": {
            "text": null
          },
          "name": "Command",
          "description": "Command to execute. The commands are integration-specific."
        },
        "params": {
          "example": "{ \"key\": \"value\" }",
          "selector": {
            "object": null
          },
          "name": "Parameters",
          "description": "Parameters for the command. The parameters are integration-specific."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["vacuum"]
          }
        ]
      }
    }
  },
  "valve": {
    "open_valve": {
      "name": "Open",
      "description": "Opens a valve.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["valve"],
            "supported_features": [1]
          }
        ]
      }
    },
    "close_valve": {
      "name": "Close",
      "description": "Closes a valve.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["valve"],
            "supported_features": [2]
          }
        ]
      }
    },
    "set_valve_position": {
      "name": "Set position",
      "description": "Moves a valve to a specific position.",
      "fields": {
        "position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Position",
          "description": "Target position."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["valve"],
            "supported_features": [4]
          }
        ]
      }
    },
    "stop_valve": {
      "name": "Stop",
      "description": "Stops the valve movement.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["valve"],
            "supported_features": [8]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a valve open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["valve"],
            "supported_features": [3]
          }
        ]
      }
    }
  },
  "input_text": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "example": "This is an example text",
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "The target value."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["input_text"]
          }
        ]
      }
    }
  },
  "counter": {
    "increment": {
      "name": "Increment",
      "description": "Increments a counter by its step size.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["counter"]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrement",
      "description": "Decrements a counter by its step size.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["counter"]
          }
        ]
      }
    },
    "reset": {
      "name": "Reset",
      "description": "Resets a counter to its initial value.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["counter"]
          }
        ]
      }
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the counter to a specific value.",
      "fields": {
        "value": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854776000,
              "mode": "box"
            }
          },
          "name": "Value",
          "description": "The new counter value the entity should be set to."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["counter"]
          }
        ]
      }
    }
  },
  "input_datetime": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_datetime": {
      "name": "Set",
      "description": "Sets the date and/or time.",
      "fields": {
        "date": {
          "example": "\"2019-04-20\"",
          "selector": {
            "text": null
          },
          "name": "Date",
          "description": "The target date."
        },
        "time": {
          "example": "\"05:04:20\"",
          "selector": {
            "time": null
          },
          "name": "Time",
          "description": "The target time."
        },
        "datetime": {
          "example": "\"2019-04-20 05:04:20\"",
          "selector": {
            "text": null
          },
          "name": "Date & time",
          "description": "The target date & time."
        },
        "timestamp": {
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854776000,
              "mode": "box"
            }
          },
          "name": "Timestamp",
          "description": "The target date & time, expressed by a UNIX timestamp."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["input_datetime"]
          }
        ]
      }
    }
  },
  "cast": {
    "show_lovelace_view": {
      "name": "Show dashboard view",
      "description": "Shows a dashboard view on a Chromecast device.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "integration": "cast",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Media player entity to show the dashboard view on."
        },
        "dashboard_path": {
          "required": true,
          "example": "lovelace-cast",
          "selector": {
            "text": null
          },
          "name": "Dashboard path",
          "description": "The URL path of the dashboard to show."
        },
        "view_path": {
          "example": "downstairs",
          "selector": {
            "text": null
          },
          "name": "View path",
          "description": "The URL path of the dashboard view to show."
        }
      }
    }
  },
  "openai_conversation": {
    "generate_image": {
      "name": "Generate image",
      "description": "Turns a prompt into an image",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "openai_conversation"
            }
          },
          "name": "Config entry",
          "description": "The config entry to use for this action"
        },
        "prompt": {
          "required": true,
          "selector": {
            "text": {
              "multiline": true
            }
          },
          "name": "Prompt",
          "description": "The text to turn into an image",
          "example": "A photo of a dog"
        },
        "size": {
          "required": false,
          "example": "1024x1024",
          "default": "1024x1024",
          "selector": {
            "select": {
              "options": ["1024x1024", "1024x1792", "1792x1024"]
            }
          },
          "name": "Size",
          "description": "The size of the image to generate"
        },
        "quality": {
          "required": false,
          "example": "standard",
          "default": "standard",
          "selector": {
            "select": {
              "options": ["standard", "hd"]
            }
          },
          "name": "Quality",
          "description": "The quality of the image that will be generated"
        },
        "style": {
          "required": false,
          "example": "vivid",
          "default": "vivid",
          "selector": {
            "select": {
              "options": ["vivid", "natural"]
            }
          },
          "name": "Style",
          "description": "The style of the generated image"
        }
      },
      "response": {
        "optional": false
      }
    }
  },
  "script": {
    "reset_vodafone_internet": {
      "name": "Reset Vodafone Internet",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "buzz_me_into_aufgang_3": {
      "name": "Buzz me into Aufgang 3",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads all the available scripts.",
      "fields": {}
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Runs the sequence of actions defined in a script.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["script"]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Stops a running script.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["script"]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Starts a script if it isn't running, stops it otherwise.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["script"]
          }
        ]
      }
    }
  },
  "tado": {
    "add_meter_reading": {
      "name": "Add meter reading",
      "description": "Adds a meter reading to Tado Energy IQ.",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "tado"
            }
          },
          "name": "Config Entry",
          "description": "Config entry to add meter reading to."
        },
        "reading": {
          "required": true,
          "selector": {
            "number": {
              "mode": "box",
              "min": 0,
              "step": 1
            }
          },
          "name": "Reading",
          "description": "Reading in m³ or kWh without decimals."
        }
      }
    },
    "set_water_heater_timer": {
      "name": "Set water heater timer",
      "description": "Turns on water heater for a set time.",
      "fields": {
        "time_period": {
          "required": true,
          "example": "01:30:00",
          "default": "01:00:00",
          "selector": {
            "text": null
          },
          "name": "Time period",
          "description": "Set the time period for the boost."
        },
        "temperature": {
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "step": 0.5,
              "unit_of_measurement": "°"
            }
          },
          "name": "Temperature",
          "description": "Temperature to set heater to."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "tado",
            "domain": ["water_heater"]
          }
        ]
      }
    },
    "set_climate_timer": {
      "name": "Set climate timer",
      "description": "Turns on climate entities for a set time.",
      "fields": {
        "temperature": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "step": 0.5,
              "unit_of_measurement": "°"
            }
          },
          "name": "Temperature",
          "description": "Temperature to set climate entity to."
        },
        "time_period": {
          "required": false,
          "example": "01:30:00",
          "selector": {
            "text": null
          },
          "name": "Time period",
          "description": "Choose this or 'Overlay'. Set the time period for the change if you want to be specific."
        },
        "requested_overlay": {
          "required": false,
          "example": "MANUAL",
          "selector": {
            "select": {
              "options": ["NEXT_TIME_BLOCK", "MANUAL", "TADO_DEFAULT"]
            }
          },
          "name": "Overlay",
          "description": "Choose this or 'Time period'. Allows you to choose an overlay. MANUAL:=Overlay until user removes; NEXT_TIME_BLOCK:=Overlay until next timeblock; TADO_DEFAULT:=Overlay based on Tado app setting."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "tado",
            "domain": ["climate"]
          }
        ]
      }
    },
    "set_climate_temperature_offset": {
      "name": "Set climate temperature offset",
      "description": "Sets the temperature offset of climate entities.",
      "fields": {
        "offset": {
          "default": 0,
          "selector": {
            "number": {
              "min": -10,
              "max": 10,
              "step": 0.01,
              "unit_of_measurement": "°"
            }
          },
          "name": "Offset",
          "description": "Offset you would like (depending on your device)."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "tado",
            "domain": ["climate"]
          }
        ]
      }
    }
  },
  "music_assistant": {
    "search": {
      "name": "Search Music Assistant",
      "description": "Performs a global search on the Music Assistant library and all providers.",
      "fields": {
        "config_entry_id": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "music_assistant"
            }
          },
          "name": "Music Assistant instance",
          "description": "Select the Music Assistant instance to perform the search on."
        },
        "name": {
          "required": true,
          "example": "We Are The Champions",
          "selector": {
            "text": null
          },
          "name": "Search name",
          "description": "The name/title to search for."
        },
        "media_type": {
          "example": "playlist",
          "selector": {
            "select": {
              "multiple": true,
              "translation_key": "media_type",
              "options": [
                "artist",
                "album",
                "audiobook",
                "playlist",
                "podcast",
                "track",
                "radio"
              ]
            }
          },
          "name": "Media type(s)",
          "description": "The type of the content to search. Such as artist, album, track, radio, or playlist. All types if omitted."
        },
        "artist": {
          "example": "Queen",
          "selector": {
            "text": null
          },
          "name": "Artist name",
          "description": "When specifying a track or album name in the name field, you can optionally restrict results by this artist name."
        },
        "album": {
          "example": "News of the world",
          "selector": {
            "text": null
          },
          "name": "Album name",
          "description": "When specifying a track name in the name field, you can optionally restrict results by this album name."
        },
        "limit": {
          "advanced": true,
          "example": 25,
          "default": 5,
          "selector": {
            "number": {
              "min": 1,
              "max": 100,
              "step": 1
            }
          },
          "name": "Limit",
          "description": "Maximum number of items to return (per media type)."
        },
        "library_only": {
          "example": "true",
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Only library items",
          "description": "Only include results that are in the library."
        }
      },
      "response": {
        "optional": false
      }
    },
    "get_library": {
      "name": "Get library items",
      "description": "Retrieves items from a Music Assistant library.",
      "fields": {
        "config_entry_id": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "music_assistant"
            }
          },
          "name": "Music Assistant instance",
          "description": "Select the Music Assistant instance to perform the search on."
        },
        "media_type": {
          "required": true,
          "example": "playlist",
          "selector": {
            "select": {
              "translation_key": "media_type",
              "options": [
                "artist",
                "album",
                "audiobook",
                "playlist",
                "podcast",
                "track",
                "radio"
              ]
            }
          },
          "name": "Media type",
          "description": "The media type for which to request details for."
        },
        "favorite": {
          "example": "true",
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Favorites only",
          "description": "Filter items so only favorites items are returned."
        },
        "search": {
          "example": "We Are The Champions",
          "selector": {
            "text": null
          },
          "name": "Search",
          "description": "Optional search string to search through this library."
        },
        "limit": {
          "advanced": true,
          "example": 25,
          "default": 25,
          "selector": {
            "number": {
              "min": 1,
              "max": 500,
              "step": 1
            }
          },
          "name": "Limit",
          "description": "Maximum number of items to return."
        },
        "offset": {
          "advanced": true,
          "example": 25,
          "default": 0,
          "selector": {
            "number": {
              "min": 1,
              "max": 1000000,
              "step": 1
            }
          },
          "name": "Offset",
          "description": "Offset to start the list from."
        },
        "order_by": {
          "example": "random",
          "selector": {
            "select": {
              "translation_key": "order_by",
              "options": [
                "name",
                "name_desc",
                "sort_name",
                "sort_name_desc",
                "timestamp_added",
                "timestamp_added_desc",
                "last_played",
                "last_played_desc",
                "play_count",
                "play_count_desc",
                "year",
                "year_desc",
                "position",
                "position_desc",
                "artist_name",
                "artist_name_desc",
                "random",
                "random_play_count"
              ]
            }
          },
          "name": "Order by",
          "description": "Sort the list by this field."
        },
        "album_type": {
          "example": "single",
          "selector": {
            "select": {
              "multiple": true,
              "translation_key": "album_type",
              "options": ["album", "single", "compilation", "ep", "unknown"]
            }
          },
          "name": "Album type filter (albums library only)",
          "description": "Filter albums by type."
        },
        "album_artists_only": {
          "example": "true",
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Enable album artists filter (only for artist library)",
          "description": "Only return album artists when listing the artists library items."
        }
      },
      "response": {
        "optional": false
      }
    },
    "play_media": {
      "name": "Play media",
      "description": "Plays media on a Music Assistant player with more fine-grained control options.",
      "fields": {
        "media_id": {
          "required": true,
          "example": "spotify://playlist/aabbccddeeff",
          "selector": {
            "object": null
          },
          "name": "Media ID(s)",
          "description": "URI or name of the item you want to play. Specify a list if you want to play/enqueue multiple items."
        },
        "media_type": {
          "example": "playlist",
          "selector": {
            "select": {
              "translation_key": "media_type",
              "options": [
                "artist",
                "album",
                "audiobook",
                "folder",
                "playlist",
                "podcast",
                "track",
                "radio"
              ]
            }
          },
          "name": "Media type",
          "description": "The type of the content to play. Such as artist, album, track or playlist. Will be auto-determined if omitted."
        },
        "artist": {
          "example": "Queen",
          "selector": {
            "text": null
          },
          "name": "Artist name",
          "description": "When specifying a track or album by name in the Media ID field, you can optionally restrict results by this artist name."
        },
        "album": {
          "example": "News of the world",
          "selector": {
            "text": null
          },
          "name": "Album name",
          "description": "When specifying a track by name in the Media ID field, you can optionally restrict results by this album name."
        },
        "enqueue": {
          "selector": {
            "select": {
              "options": ["play", "replace", "next", "replace_next", "add"],
              "translation_key": "enqueue"
            }
          },
          "name": "Enqueue",
          "description": "If the content should be played now or added to the queue."
        },
        "radio_mode": {
          "advanced": true,
          "selector": {
            "boolean": null
          },
          "name": "Enable radio mode",
          "description": "Enable radio mode to auto-generate a playlist based on the selection."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "integration": "music_assistant",
            "supported_features": [512]
          }
        ]
      }
    },
    "play_announcement": {
      "name": "Play announcement",
      "description": "Plays an announcement on a Music Assistant player with more fine-grained control options.",
      "fields": {
        "url": {
          "required": true,
          "example": "http://someremotesite.com/doorbell.mp3",
          "selector": {
            "text": null
          },
          "name": "URL",
          "description": "URL to the notification sound."
        },
        "use_pre_announce": {
          "example": "true",
          "selector": {
            "boolean": null
          },
          "name": "Use pre-announce",
          "description": "Use pre-announcement sound for the announcement. Omit to use the player default."
        },
        "announce_volume": {
          "example": 75,
          "selector": {
            "number": {
              "min": 1,
              "max": 100,
              "step": 1
            }
          },
          "name": "Announce volume",
          "description": "Use a forced volume level for the announcement. Omit to use player default."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "integration": "music_assistant",
            "supported_features": [512, 1048576]
          }
        ]
      }
    },
    "transfer_queue": {
      "name": "Transfer queue",
      "description": "Transfers a player's queue to another player.",
      "fields": {
        "source_player": {
          "selector": {
            "entity": {
              "domain": "media_player",
              "integration": "music_assistant"
            }
          },
          "name": "Source media player",
          "description": "The source media player which has the queue you want to transfer. When omitted, the first playing player will be used."
        },
        "auto_play": {
          "example": "true",
          "selector": {
            "boolean": null
          },
          "name": "Auto play",
          "description": "Start playing the queue on the target player. Omit to use the default behavior."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "integration": "music_assistant"
          }
        ]
      }
    },
    "get_queue": {
      "name": "Get playerQueue details (advanced)",
      "description": "Retrieves the details of the currently active queue of a Music Assistant player.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["media_player"],
            "integration": "music_assistant",
            "supported_features": [512]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "text": {
    "set_value": {
      "name": "Set value",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "example": "Hello world!",
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "Enter your text."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["text"]
          }
        ]
      }
    }
  },
  "image": {
    "snapshot": {
      "name": "Take snapshot",
      "description": "Takes a snapshot from an image.",
      "fields": {
        "filename": {
          "required": true,
          "example": "/tmp/image_snapshot.jpg",
          "selector": {
            "text": null
          },
          "name": "Filename",
          "description": "Template of a filename. Variable available is `entity_id`."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["image"]
          }
        ]
      }
    }
  },
  "device_tracker": {
    "see": {
      "name": "See",
      "description": "Manually update the records of a seen legacy device tracker in the known_devices.yaml file.",
      "fields": {
        "mac": {
          "example": "FF:FF:FF:FF:FF:FF",
          "selector": {
            "text": null
          },
          "name": "MAC address",
          "description": "MAC address of the device."
        },
        "dev_id": {
          "example": "phonedave",
          "selector": {
            "text": null
          },
          "name": "Device ID",
          "description": "ID of the device (find the ID in `known_devices.yaml`)."
        },
        "host_name": {
          "example": "Dave",
          "selector": {
            "text": null
          },
          "name": "Hostname",
          "description": "Hostname of the device."
        },
        "location_name": {
          "example": "home",
          "selector": {
            "text": null
          },
          "name": "Location",
          "description": "Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone."
        },
        "gps": {
          "example": "[51.509802, -0.086692]",
          "selector": {
            "object": null
          },
          "name": "GPS coordinates",
          "description": "GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539])."
        },
        "gps_accuracy": {
          "selector": {
            "number": {
              "min": 0,
              "mode": "box",
              "unit_of_measurement": "m"
            }
          },
          "name": "GPS accuracy",
          "description": "Accuracy of the GPS coordinates."
        },
        "battery": {
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Battery level",
          "description": "Battery level of the device."
        }
      }
    }
  },
  "elgato": {
    "identify": {
      "name": "Identify",
      "description": "Identifies an Elgato Light. Blinks the light, which can be useful for, e.g., a visual notification.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "elgato",
            "domain": ["light"]
          }
        ]
      }
    }
  },
  "remote": {
    "turn_off": {
      "name": "Turn off",
      "description": "Sends the turn off command.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["remote"]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Sends the turn on command.",
      "fields": {
        "activity": {
          "example": "BedroomTV",
          "filter": {
            "supported_features": [4]
          },
          "selector": {
            "text": null
          },
          "name": "Activity",
          "description": "Activity ID or activity name to be started."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["remote"]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Sends the toggle command.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["remote"]
          }
        ]
      }
    },
    "send_command": {
      "name": "Send command",
      "description": "Sends a command or a list of commands to a device.",
      "fields": {
        "device": {
          "example": "32756745",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device ID to send command to."
        },
        "command": {
          "required": true,
          "example": "Play",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "A single command or a list of commands to send."
        },
        "num_repeats": {
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 255
            }
          },
          "name": "Repeats",
          "description": "The number of times you want to repeat the commands."
        },
        "delay_secs": {
          "default": 0.4,
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 0.1,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Delay seconds",
          "description": "The time you want to wait in between repeated commands."
        },
        "hold_secs": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 0.1,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Hold seconds",
          "description": "The time you want to have it held before the release is send."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["remote"]
          }
        ]
      }
    },
    "learn_command": {
      "name": "Learn command",
      "description": "Learns a command or a list of commands from a device.",
      "fields": {
        "device": {
          "example": "television",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device ID to learn command from."
        },
        "command": {
          "example": "Turn on",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "A single command or a list of commands to learn."
        },
        "command_type": {
          "default": "ir",
          "selector": {
            "select": {
              "options": ["ir", "rf"]
            }
          },
          "name": "Command type",
          "description": "The type of command to be learned."
        },
        "alternative": {
          "selector": {
            "boolean": null
          },
          "name": "Alternative",
          "description": "If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won't change the state."
        },
        "timeout": {
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 5,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Timeout",
          "description": "Timeout for the command to be learned."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["remote"]
          }
        ]
      }
    },
    "delete_command": {
      "name": "Delete command",
      "description": "Deletes a command or a list of commands from the database.",
      "fields": {
        "device": {
          "example": "television",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device from which commands will be deleted."
        },
        "command": {
          "required": true,
          "example": "Mute",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "The single command or the list of commands to be deleted."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["remote"]
          }
        ]
      }
    }
  },
  "weather": {
    "get_forecasts": {
      "name": "Get forecasts",
      "description": "Retrieves the forecast from selected weather services.",
      "fields": {
        "type": {
          "required": true,
          "selector": {
            "select": {
              "options": ["daily", "hourly", "twice_daily"],
              "translation_key": "forecast_type"
            }
          },
          "name": "Forecast type",
          "description": "The scope of the weather forecast."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["weather"],
            "supported_features": [1, 2, 4]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "hue": {
    "activate_scene": {
      "name": "Activate Hue scene",
      "description": "Activates a Hue scene with more control over the options.",
      "fields": {
        "transition": {
          "selector": {
            "number": {
              "min": 0,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Transition duration it takes to bring devices to the state defined in the scene."
        },
        "dynamic": {
          "selector": {
            "boolean": null
          },
          "name": "Dynamic",
          "description": "Enable dynamic mode of the scene."
        },
        "speed": {
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100
            }
          },
          "name": "Speed",
          "description": "Speed of dynamic palette for this scene."
        },
        "brightness": {
          "advanced": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 255
            }
          },
          "name": "Brightness",
          "description": "Set brightness for the scene."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["scene"],
            "integration": "hue"
          }
        ]
      }
    },
    "hue_activate_scene": {
      "name": "Activate scene",
      "description": "Activates a Hue scene stored in the Hue hub.",
      "fields": {
        "group_name": {
          "example": "Living Room",
          "selector": {
            "text": null
          },
          "name": "Group",
          "description": "Name of Hue group/room from the Hue app."
        },
        "scene_name": {
          "example": "Energize",
          "selector": {
            "text": null
          },
          "name": "Scene",
          "description": "Name of Hue scene from the Hue app."
        },
        "dynamic": {
          "selector": {
            "boolean": null
          },
          "name": "Dynamic",
          "description": "Enable dynamic mode of the scene (V2 bridges and supported scenes only)."
        }
      }
    }
  },
  "bambu_lab": {
    "send_command": {
      "name": "Send Command",
      "description": "Send an arbitrary command to the 3D printer",
      "fields": {
        "command": {
          "name": "Command",
          "description": "The command to send to the printer",
          "required": true,
          "example": "M104 S200",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "bambu_lab"
          }
        ]
      }
    },
    "print_project_file": {
      "name": "Print 3MF project file",
      "description": "Print sliced 3MF file stored on the SD card",
      "fields": {
        "filepath": {
          "name": "File path",
          "description": "Filename on SD card",
          "required": true,
          "example": "filename.3mf",
          "selector": {
            "text": null
          }
        },
        "plate": {
          "name": "Plate number",
          "description": "Plate number to print",
          "required": true,
          "default": 1,
          "selector": {
            "number": {
              "mode": "box",
              "min": 1,
              "max": 100
            }
          }
        },
        "timelapse": {
          "name": "Timelapse",
          "description": "Record timelapse of the print",
          "default": false,
          "required": true,
          "selector": {
            "boolean": null
          }
        },
        "bed_leveling": {
          "name": "Bed Leveling",
          "description": "Perform bed leveling before print",
          "default": true,
          "required": true,
          "selector": {
            "boolean": null
          }
        },
        "flow_cali": {
          "name": "Flow Calibration",
          "description": "Perform flow calibration before print",
          "default": true,
          "required": true,
          "selector": {
            "boolean": null
          }
        },
        "vibration_cali": {
          "name": "Vibration Calibration",
          "description": "Perform vibration calibration (aka XY Mech Sweep) before print",
          "default": true,
          "required": true,
          "selector": {
            "boolean": null
          }
        },
        "layer_inspect": {
          "name": "First Layer Inspection",
          "description": "Perform first layer inspection during print",
          "default": true,
          "required": true,
          "selector": {
            "boolean": null
          }
        },
        "use_ams": {
          "name": "Use AMS",
          "description": "Use AMS for print. Uses external spool otherwise",
          "default": false,
          "required": true,
          "selector": {
            "boolean": null
          }
        },
        "ams_mapping": {
          "name": "AMS Slots Mapping",
          "description": "https://community.home-assistant.io/t/bambu-lab-x1-x1c-mqtt/489510/738",
          "default": "0",
          "example": "2,-1,0",
          "required": true,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "bambu_lab"
          }
        ]
      }
    },
    "skip_objects": {
      "name": "Skip objects",
      "description": "Skip objects currently being printed",
      "fields": {
        "objects": {
          "name": "Object IDs",
          "description": "Object IDs are available from printable objects entity attributes",
          "required": true,
          "example": "409,1463",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "bambu_lab"
          }
        ]
      }
    },
    "move_axis": {
      "name": "Move axis",
      "description": "Move the printhead or bed",
      "fields": {
        "axis": {
          "name": "Axis",
          "description": "The axis to move. X1 and P1 devices, X and Y move the printhead, Z moves the bed. A1, Z moves the gantry, Y the bed, X the printhead.",
          "required": true,
          "example": "X",
          "selector": {
            "select": {
              "multiple": false,
              "mode": "dropdown",
              "options": ["X", "Y", "Z", "Home"]
            }
          }
        },
        "distance": {
          "name": "Distance",
          "description": "The distance (in mm) to move the axis A negative distance moves Z up, X left, Y forward.",
          "example": 10,
          "selector": {
            "number": {
              "min": -100,
              "max": 100,
              "step": 1
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "bambu_lab"
          }
        ]
      }
    },
    "unload_filament": {
      "name": "Unload filament",
      "description": "Unload the filament currently loaded into the extruder",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "bambu_lab"
          }
        ]
      }
    },
    "load_filament": {
      "name": "Load filament",
      "description": "Load a new filament into the extruder passed an AMS tray or an External spool entity",
      "fields": {
        "temperature": {
          "name": "Temperature",
          "description": "Target nozzle temperature once the filament is loaded. By default uses the midpoint between min and max temperature of the chosen filament.",
          "example": 220,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 1
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "bambu_lab"
          }
        ]
      }
    },
    "extrude_retract": {
      "name": "Extrude or retract filament",
      "description": "Perform an extrusion or extraction of the loaded filament",
      "fields": {
        "type": {
          "name": "Type",
          "description": "The type of extrude action to perform",
          "required": true,
          "example": "Extrude",
          "selector": {
            "select": {
              "multiple": false,
              "mode": "dropdown",
              "options": ["Extrude", "Retract"]
            }
          }
        },
        "force": {
          "name": "Force",
          "description": "Perform extrusion or retraction if nozzle temperature is below 170ºC.",
          "example": false,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "bambu_lab"
          }
        ]
      }
    },
    "set_filament": {
      "name": "Set filament",
      "description": "Sets filament details on an AMS tray or an External spool entity",
      "fields": {
        "tray_info_idx": {
          "name": "Filament ID",
          "description": "Bambu's filament ID. E.g. GFL96 is Generic PLA Silk",
          "required": true,
          "example": "GFL96",
          "selector": {
            "text": null
          }
        },
        "tray_color": {
          "name": "Color",
          "description": "RGBA value for the color. E.g. FF0000FF is opaque red.",
          "required": true,
          "example": "FF0000FF",
          "selector": {
            "text": null
          }
        },
        "tray_type": {
          "name": "Filament type",
          "description": "Type of filament. E.g. 'PLA' or 'PETG'",
          "required": true,
          "example": "PLA",
          "selector": {
            "text": null
          }
        },
        "nozzle_temp_min": {
          "name": "Minimum recommended nozzle temperature",
          "description": "The minimum temperature that it is recommended to print this filament at.",
          "required": true,
          "example": 220,
          "selector": {
            "number": {
              "min": 160,
              "max": 300,
              "step": 1
            }
          }
        },
        "nozzle_temp_max": {
          "name": "Maximum recommended nozzle temperature",
          "description": "The maximum temperature that it is recommended to print this filament at.",
          "required": true,
          "example": 220,
          "selector": {
            "number": {
              "min": 160,
              "max": 300,
              "step": 1
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "bambu_lab"
          }
        ]
      }
    },
    "get_filament_data": {
      "name": "Gets a json string with details about all known filaments",
      "description": "Gets a json string with details about all known filaments",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "bambu_lab"
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "alarm_control_panel": {
    "alarm_disarm": {
      "name": "Disarm",
      "description": "Disarms the alarm.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to disarm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["alarm_control_panel"]
          }
        ]
      }
    },
    "alarm_arm_home": {
      "name": "Arm home",
      "description": "Arms the alarm in the home mode.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["alarm_control_panel"],
            "supported_features": [1]
          }
        ]
      }
    },
    "alarm_arm_away": {
      "name": "Arm away",
      "description": "Arms the alarm in the away mode.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["alarm_control_panel"],
            "supported_features": [2]
          }
        ]
      }
    },
    "alarm_arm_night": {
      "name": "Arm night",
      "description": "Arms the alarm in the night mode.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["alarm_control_panel"],
            "supported_features": [4]
          }
        ]
      }
    },
    "alarm_arm_vacation": {
      "name": "Arm vacation",
      "description": "Arms the alarm in the vacation mode.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["alarm_control_panel"],
            "supported_features": [32]
          }
        ]
      }
    },
    "alarm_arm_custom_bypass": {
      "name": "Arm with custom bypass",
      "description": "Arms the alarm while allowing to bypass a custom area.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["alarm_control_panel"],
            "supported_features": [16]
          }
        ]
      }
    },
    "alarm_trigger": {
      "name": "Trigger",
      "description": "Triggers the alarm manually.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["alarm_control_panel"],
            "supported_features": [8]
          }
        ]
      }
    }
  },
  "alarmo": {
    "arm": {
      "name": "",
      "description": "",
      "fields": {
        "entity_id": {
          "example": "alarm_control_panel.alarm",
          "required": true,
          "selector": {
            "entity": {
              "integration": "alarmo",
              "domain": "alarm_control_panel"
            }
          }
        },
        "code": {
          "example": "1234",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "mode": {
          "example": "away",
          "required": false,
          "default": "away",
          "selector": {
            "select": {
              "translation_key": "arm_mode",
              "options": ["away", "night", "home", "vacation", "custom"]
            }
          }
        },
        "skip_delay": {
          "example": false,
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "force": {
          "example": false,
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "disarm": {
      "name": "",
      "description": "",
      "fields": {
        "entity_id": {
          "example": "alarm_control_panel.alarm",
          "required": true,
          "selector": {
            "entity": {
              "integration": "alarmo",
              "domain": "alarm_control_panel"
            }
          }
        },
        "code": {
          "example": "1234",
          "required": false,
          "selector": {
            "text": null
          }
        }
      }
    },
    "enable_user": {
      "name": "",
      "description": "",
      "fields": {
        "name": {
          "example": "Frank",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    },
    "disable_user": {
      "name": "",
      "description": "",
      "fields": {
        "name": {
          "example": "Frank",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    }
  },
  "google": {
    "add_event": {
      "name": "Add event",
      "description": "Adds a new calendar event.",
      "fields": {
        "calendar_id": {
          "required": true,
          "example": "Your email",
          "selector": {
            "text": null
          },
          "name": "Calendar ID",
          "description": "The id of the calendar you want."
        },
        "summary": {
          "required": true,
          "example": "Bowling",
          "selector": {
            "text": null
          },
          "name": "Summary",
          "description": "Acts as the title of the event."
        },
        "description": {
          "example": "Birthday bowling",
          "selector": {
            "text": null
          },
          "name": "Description",
          "description": "The description of the event. Optional."
        },
        "start_date_time": {
          "example": "2019-03-22 20:00:00",
          "selector": {
            "text": null
          },
          "name": "Start time",
          "description": "The date and time the event should start."
        },
        "end_date_time": {
          "example": "2019-03-22 22:00:00",
          "selector": {
            "text": null
          },
          "name": "End time",
          "description": "The date and time the event should end."
        },
        "start_date": {
          "example": "2019-03-10",
          "selector": {
            "text": null
          },
          "name": "Start date",
          "description": "The date the whole day event should start."
        },
        "end_date": {
          "example": "2019-03-11",
          "selector": {
            "text": null
          },
          "name": "End date",
          "description": "The date the whole day event should end."
        },
        "in": {
          "example": "\"days\": 2 or \"weeks\": 2",
          "selector": {
            "object": null
          },
          "name": "In",
          "description": "Days or weeks that you want to create the event in."
        }
      }
    },
    "create_event": {
      "name": "Create event",
      "description": "Adds a new calendar event.",
      "fields": {
        "summary": {
          "required": true,
          "example": "Bowling",
          "selector": {
            "text": null
          },
          "name": "Summary",
          "description": "Acts as the title of the event."
        },
        "description": {
          "example": "Birthday bowling",
          "selector": {
            "text": null
          },
          "name": "Description",
          "description": "The description of the event. Optional."
        },
        "start_date_time": {
          "example": "2022-03-22 20:00:00",
          "selector": {
            "text": null
          },
          "name": "Start time",
          "description": "The date and time the event should start."
        },
        "end_date_time": {
          "example": "2022-03-22 22:00:00",
          "selector": {
            "text": null
          },
          "name": "End time",
          "description": "The date and time the event should end."
        },
        "start_date": {
          "example": "2022-03-10",
          "selector": {
            "text": null
          },
          "name": "Start date",
          "description": "The date the whole day event should start."
        },
        "end_date": {
          "example": "2022-03-11",
          "selector": {
            "text": null
          },
          "name": "End date",
          "description": "The date the whole day event should end."
        },
        "in": {
          "example": "\"days\": 2 or \"weeks\": 2",
          "selector": {
            "object": null
          },
          "name": "In",
          "description": "Days or weeks that you want to create the event in."
        },
        "location": {
          "example": "Conference Room - F123, Bldg. 002",
          "selector": {
            "text": null
          },
          "name": "Location",
          "description": "The location of the event. Optional."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "google",
            "domain": ["calendar"]
          }
        ]
      }
    }
  },
  "water_heater": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns water heater on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["water_heater"]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns water heater off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["water_heater"]
          }
        ]
      }
    },
    "set_away_mode": {
      "name": "Set away mode",
      "description": "Turns away mode on/off.",
      "fields": {
        "away_mode": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Away mode",
          "description": "New value of away mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["water_heater"]
          }
        ]
      }
    },
    "set_temperature": {
      "name": "Set temperature",
      "description": "Sets the target temperature.",
      "fields": {
        "temperature": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "step": 0.5,
              "unit_of_measurement": "°"
            }
          },
          "name": "Temperature",
          "description": "New target temperature for the water heater."
        },
        "operation_mode": {
          "example": "eco",
          "selector": {
            "text": null
          },
          "name": "Operation mode",
          "description": "New value of the operation mode. For a list of possible modes, refer to the integration documentation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["water_heater"]
          }
        ]
      }
    },
    "set_operation_mode": {
      "name": "Set operation mode",
      "description": "Sets the operation mode.",
      "fields": {
        "operation_mode": {
          "required": true,
          "example": "eco",
          "selector": {
            "text": null
          },
          "name": "Operation mode",
          "description": "New value of the operation mode. For a list of possible modes, refer to the integration documentation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["water_heater"]
          }
        ]
      }
    }
  },
  "calendar": {
    "create_event": {
      "name": "Create event",
      "description": "Adds a new calendar event.",
      "fields": {
        "summary": {
          "required": true,
          "example": "Department Party",
          "selector": {
            "text": null
          },
          "name": "Summary",
          "description": "Defines the short summary or subject for the event."
        },
        "description": {
          "example": "Meeting to provide technical review for 'Phoenix' design.",
          "selector": {
            "text": null
          },
          "name": "Description",
          "description": "A more complete description of the event than the one provided by the summary."
        },
        "start_date_time": {
          "example": "2022-03-22 20:00:00",
          "selector": {
            "datetime": null
          },
          "name": "Start time",
          "description": "The date and time the event should start."
        },
        "end_date_time": {
          "example": "2022-03-22 22:00:00",
          "selector": {
            "datetime": null
          },
          "name": "End time",
          "description": "The date and time the event should end."
        },
        "start_date": {
          "example": "2022-03-22",
          "selector": {
            "date": null
          },
          "name": "Start date",
          "description": "The date the all-day event should start."
        },
        "end_date": {
          "example": "2022-03-23",
          "selector": {
            "date": null
          },
          "name": "End date",
          "description": "The date the all-day event should end (exclusive)."
        },
        "in": {
          "example": "{\"days\": 2} or {\"weeks\": 2}",
          "name": "In",
          "description": "Days or weeks that you want to create the event in."
        },
        "location": {
          "example": "Conference Room - F123, Bldg. 002",
          "selector": {
            "text": null
          },
          "name": "Location",
          "description": "The location of the event."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["calendar"],
            "supported_features": [1]
          }
        ]
      }
    },
    "get_events": {
      "name": "Get events",
      "description": "Get events on a calendar within a time range.",
      "fields": {
        "start_date_time": {
          "example": "2022-03-22 20:00:00",
          "selector": {
            "datetime": null
          },
          "name": "Start time",
          "description": "Returns active events after this time (exclusive). When not set, defaults to now."
        },
        "end_date_time": {
          "example": "2022-03-22 22:00:00",
          "selector": {
            "datetime": null
          },
          "name": "End time",
          "description": "Returns active events before this time (exclusive). Cannot be used with Duration."
        },
        "duration": {
          "selector": {
            "duration": null
          },
          "name": "Duration",
          "description": "Returns active events from Start time for the specified duration."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["calendar"]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "frigate": {
    "export_recording": {
      "name": "Export recording",
      "description": "Export a custom recording or timelapse.",
      "fields": {
        "playback_factor": {
          "name": "Playback Factor",
          "description": "Playback factor for recordings",
          "required": true,
          "advanced": false,
          "example": "realtime",
          "default": "realtime",
          "selector": {
            "select": {
              "options": ["realtime", "timelapse_25x"]
            }
          }
        },
        "start_time": {
          "name": "Export Start Time",
          "description": "Start time of exported recording",
          "required": true,
          "advanced": false,
          "selector": {
            "datetime": null
          }
        },
        "end_time": {
          "name": "Export End Time",
          "description": "End time of exported recording",
          "required": true,
          "advanced": false,
          "selector": {
            "datetime": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "frigate",
            "domain": ["camera"],
            "device_class": ["camera"]
          }
        ]
      }
    },
    "favorite_event": {
      "name": "Favorite or unfavorite Event",
      "description": "Favorites or unfavorites an event. Favorited events are retained indefinitely.\n",
      "fields": {
        "event_id": {
          "name": "Event ID",
          "description": "ID of the event to favorite or unfavorite.",
          "required": true,
          "advanced": false,
          "example": "1656510950.19548-ihtjj7",
          "default": "",
          "selector": {
            "text": null
          }
        },
        "favorite": {
          "name": "Favorite",
          "description": "If the event should be favorited or unfavorited. Enable to favorite, disable to unfavorite.\n",
          "required": false,
          "advanced": false,
          "example": true,
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "frigate",
            "domain": ["camera"],
            "device_class": ["camera"]
          }
        ]
      }
    },
    "ptz": {
      "name": "Control camera via PTZ",
      "description": "Pan / Tilt, Zoom, or move a camera to a preset\n",
      "fields": {
        "action": {
          "name": "PTZ Service",
          "description": "Type of PTZ action",
          "required": true,
          "advanced": false,
          "example": "move",
          "default": "move",
          "selector": {
            "select": {
              "options": ["move", "preset", "stop", "zoom"]
            }
          }
        },
        "argument": {
          "name": "PTZ Action",
          "description": "left, right, up, down for move; in, out for zoom; name of preset\n",
          "required": false,
          "advanced": false,
          "example": "down",
          "default": "",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "frigate",
            "domain": ["camera"],
            "device_class": ["camera"]
          }
        ]
      }
    },
    "create_event": {
      "name": "Create an event",
      "description": "Create a manual event with a given label for a camera.\n",
      "fields": {
        "label": {
          "name": "Label",
          "description": "Label for the event",
          "required": true,
          "advanced": false,
          "example": "Doorbell press",
          "default": "",
          "selector": {
            "text": null
          }
        },
        "sub_label": {
          "name": "Sub Label",
          "description": "Sub label for the event",
          "required": false,
          "advanced": false,
          "example": "Front door",
          "selector": {
            "text": null
          }
        },
        "duration": {
          "name": "Duration",
          "description": "Predetermined length of event. Default is 30 seconds. Use 0 for indefinite.\n",
          "required": false,
          "advanced": false,
          "example": 30,
          "default": 30,
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "step": 1
            }
          }
        },
        "include_recording": {
          "name": "Include Recording",
          "description": "Whether the event should save recordings along with the snapshot that is taken.\n",
          "required": false,
          "advanced": false,
          "example": true,
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "frigate",
            "domain": ["camera"],
            "device_class": ["camera"]
          }
        ]
      },
      "response": {
        "optional": true
      }
    },
    "end_event": {
      "name": "End an event",
      "description": "End a manual event with a given id for a camera.\n",
      "fields": {
        "event_id": {
          "name": "Event ID",
          "description": "ID of the event to end.",
          "required": true,
          "advanced": false,
          "example": "1656510950.19548-ihtjj7",
          "default": "",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "frigate",
            "domain": ["camera"],
            "device_class": ["camera"]
          }
        ]
      },
      "response": {
        "optional": true
      }
    }
  },
  "netatmo": {
    "set_persons_home": {
      "name": "Set persons at home",
      "description": "Sets a list of persons as at home. Person's name must match a name known by the Netatmo Indoor (Welcome) Camera.",
      "fields": {
        "persons": {
          "example": "[Alice, Bob]",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Persons",
          "description": "List of names."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "netatmo",
            "domain": ["camera"]
          }
        ]
      }
    },
    "set_person_away": {
      "name": "Set person away",
      "description": "Sets a person as away. If no person is set the home will be marked as empty. Person's name must match a name known by the Netatmo Indoor (Welcome) Camera.",
      "fields": {
        "person": {
          "example": "Bob",
          "selector": {
            "text": null
          },
          "name": "Person",
          "description": "Person's name."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "netatmo",
            "domain": ["camera"]
          }
        ]
      }
    },
    "set_camera_light": {
      "name": "Set camera light mode",
      "description": "Sets the light mode for a Netatmo Outdoor camera light.",
      "fields": {
        "camera_light_mode": {
          "required": true,
          "selector": {
            "select": {
              "options": ["on", "off", "auto"]
            }
          },
          "name": "Camera light mode",
          "description": "Outdoor camera light mode."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "netatmo",
            "domain": ["light"]
          }
        ]
      }
    },
    "set_schedule": {
      "name": "Set heating schedule",
      "description": "Sets the heating schedule for Netatmo climate device. The schedule name must match a schedule configured at Netatmo.",
      "fields": {
        "schedule_name": {
          "example": "Standard",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Schedule",
          "description": "Schedule name."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "netatmo",
            "domain": ["climate"]
          }
        ]
      }
    },
    "set_preset_mode_with_end_datetime": {
      "name": "Set preset mode with end date & time",
      "description": "Sets the preset mode for a Netatmo climate device. The preset mode must match a preset mode configured at Netatmo.",
      "fields": {
        "preset_mode": {
          "required": true,
          "example": "away",
          "selector": {
            "select": {
              "options": ["away", "frost_guard"]
            }
          },
          "name": "Preset mode",
          "description": "Climate preset mode such as Schedule, Away or Frost Guard."
        },
        "end_datetime": {
          "required": true,
          "example": "\"2019-04-20 05:04:20\"",
          "selector": {
            "datetime": null
          },
          "name": "End date & time",
          "description": "Date & time the preset will be active until."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "netatmo",
            "domain": ["climate"]
          }
        ]
      }
    },
    "set_temperature_with_end_datetime": {
      "name": "Set temperature with end date & time",
      "description": "Sets the target temperature for a Netatmo climate device with an end date & time.",
      "fields": {
        "target_temperature": {
          "required": true,
          "example": "19.5",
          "selector": {
            "number": {
              "min": 7,
              "max": 30,
              "step": 0.5
            }
          },
          "name": "Target temperature",
          "description": "The target temperature for the device."
        },
        "end_datetime": {
          "required": true,
          "example": "\"2019-04-20 05:04:20\"",
          "selector": {
            "datetime": null
          },
          "name": "End date & time",
          "description": "Date & time the target temperature will be active until."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "netatmo",
            "domain": ["climate"]
          }
        ]
      }
    },
    "set_temperature_with_time_period": {
      "name": "Set temperature with time period",
      "description": "Sets the target temperature for a Netatmo climate device with time period.",
      "fields": {
        "target_temperature": {
          "required": true,
          "example": "19.5",
          "selector": {
            "number": {
              "min": 7,
              "max": 30,
              "step": 0.5
            }
          },
          "name": "Target temperature",
          "description": "The target temperature for the device."
        },
        "time_period": {
          "required": true,
          "default": {
            "hours": 3,
            "minutes": 0,
            "seconds": 0,
            "days": 0
          },
          "selector": {
            "duration": null
          },
          "name": "Time period",
          "description": "The time period which the temperature setting will be active for."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "netatmo",
            "domain": ["climate"]
          }
        ]
      }
    },
    "clear_temperature_setting": {
      "name": "Clear temperature setting",
      "description": "Clears any temperature setting for a Netatmo climate device reverting it to the current preset or schedule.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "netatmo",
            "domain": ["climate"]
          }
        ]
      }
    },
    "register_webhook": {
      "name": "Register webhook",
      "description": "Registers the webhook to the Netatmo backend.",
      "fields": {}
    },
    "unregister_webhook": {
      "name": "Unregister webhook",
      "description": "Unregisters the webhook from the Netatmo backend.",
      "fields": {}
    }
  },
  "sonos": {
    "snapshot": {
      "name": "Snapshot",
      "description": "Takes a snapshot of a media player.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "sonos",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will be snapshot."
        },
        "with_group": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "With group",
          "description": "Whether the snapshot should include the group layout and the state of other speakers in the group."
        }
      }
    },
    "restore": {
      "name": "Restore",
      "description": "Restores a snapshot of a media player.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "sonos",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will be restored."
        },
        "with_group": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "With group",
          "description": "Whether the group layout and the state of other speakers in the group should also be restored."
        }
      }
    },
    "set_sleep_timer": {
      "name": "Set timer",
      "description": "Sets a Sonos timer.",
      "fields": {
        "sleep_time": {
          "selector": {
            "number": {
              "min": 0,
              "max": 7200,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Sleep Time",
          "description": "Number of seconds to set the timer."
        }
      },
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    },
    "clear_sleep_timer": {
      "name": "Clear timer",
      "description": "Clears a Sonos timer.",
      "fields": {},
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    },
    "update_alarm": {
      "name": "Update alarm",
      "description": "Updates an alarm with new time and volume settings.",
      "fields": {
        "alarm_id": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 1440,
              "mode": "box"
            }
          },
          "name": "Alarm ID",
          "description": "The ID of the alarm to be updated."
        },
        "time": {
          "example": "07:00",
          "selector": {
            "time": null
          },
          "name": "Time",
          "description": "The time for the alarm."
        },
        "volume": {
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.01
            }
          },
          "name": "Volume",
          "description": "The alarm volume level."
        },
        "enabled": {
          "selector": {
            "boolean": null
          },
          "name": "Alarm enabled",
          "description": "Whether or not to enable the alarm."
        },
        "include_linked_zones": {
          "selector": {
            "boolean": null
          },
          "name": "Include linked zones",
          "description": "Whether the alarm also plays on grouped players."
        }
      },
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    },
    "play_queue": {
      "name": "Play queue",
      "description": "Starts playing the queue from the first item.",
      "fields": {
        "queue_position": {
          "selector": {
            "number": {
              "min": 0,
              "max": 10000,
              "mode": "box"
            }
          },
          "name": "Queue position",
          "description": "Position of the song in the queue to start playing from."
        }
      },
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    },
    "remove_from_queue": {
      "name": "Remove from queue",
      "description": "Removes an item from the queue.",
      "fields": {
        "queue_position": {
          "selector": {
            "number": {
              "min": 0,
              "max": 10000,
              "mode": "box"
            }
          },
          "name": "Queue position",
          "description": "Position in the queue to remove."
        }
      },
      "target": {
        "device": [
          {
            "integration": "sonos"
          }
        ]
      }
    },
    "get_queue": {
      "name": "Get queue",
      "description": "Returns the contents of the queue.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "sonos",
            "domain": ["media_player"]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "time": {
    "set_value": {
      "name": "Set Time",
      "description": "Sets the time.",
      "fields": {
        "time": {
          "required": true,
          "example": "22:15",
          "selector": {
            "time": null
          },
          "name": "Time",
          "description": "The time to set."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["time"]
          }
        ]
      }
    }
  },
  "automation": {
    "trigger": {
      "name": "Trigger",
      "description": "Triggers the actions of an automation.",
      "fields": {
        "skip_condition": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Skip conditions",
          "description": "Defines whether or not the conditions will be skipped."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["automation"]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles (enable / disable) an automation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["automation"]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Enables an automation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["automation"]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Disables an automation.",
      "fields": {
        "stop_actions": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Stop actions",
          "description": "Stops currently running actions."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["automation"]
          }
        ]
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads the automation configuration.",
      "fields": {}
    }
  },
  "roborock": {
    "vacuum_remote_control_start": {
      "name": "Vacuum remote control start",
      "description": "Start remote control of the vacuum cleaner. You can then move it with `remote_control_move`, when done call `remote_control_stop`.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "roborock",
            "domain": ["vacuum"]
          }
        ]
      }
    },
    "vacuum_remote_control_stop": {
      "name": "Vacuum remote control stop",
      "description": "Stop remote control mode of the vacuum cleaner.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "roborock",
            "domain": ["vacuum"]
          }
        ]
      }
    },
    "vacuum_remote_control_move": {
      "name": "Vacuum remote control move",
      "description": "Remote control the vacuum cleaner, make sure you first set it in remote control mode with `remote_control_start`.",
      "fields": {
        "velocity": {
          "name": "Velocity",
          "description": "Speed.",
          "selector": {
            "number": {
              "min": -0.29,
              "max": 0.29,
              "step": 0.01
            }
          }
        },
        "rotation": {
          "name": "Rotation",
          "description": "Rotation, between -179 degrees and 179 degrees.",
          "selector": {
            "number": {
              "min": -179,
              "max": 179,
              "unit_of_measurement": "°"
            }
          }
        },
        "duration": {
          "name": "Duration",
          "description": "Duration of the movement.",
          "selector": {
            "number": {
              "min": 1,
              "max": 86400,
              "unit_of_measurement": "seconds"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "roborock",
            "domain": ["vacuum"]
          }
        ]
      }
    },
    "vacuum_remote_control_move_step": {
      "name": "Vacuum remote control move step",
      "description": "Remote control the vacuum cleaner, only makes one move and then stops.",
      "fields": {
        "velocity": {
          "name": "Velocity",
          "description": "Speed.",
          "selector": {
            "number": {
              "min": -0.29,
              "max": 0.29,
              "step": 0.01
            }
          }
        },
        "rotation": {
          "name": "Rotation",
          "description": "Rotation.",
          "selector": {
            "number": {
              "min": -179,
              "max": 179,
              "unit_of_measurement": "°"
            }
          }
        },
        "duration": {
          "name": "Duration",
          "description": "Duration of the movement.",
          "selector": {
            "number": {
              "min": 1,
              "max": 86400,
              "unit_of_measurement": "seconds"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "roborock",
            "domain": ["vacuum"]
          }
        ]
      }
    },
    "vacuum_clean_zone": {
      "name": "Vacuum clean zone",
      "description": "Start the cleaning operation in the selected areas for the number of repeats indicated.",
      "fields": {
        "zone": {
          "name": "Zone",
          "description": "Array of zones. Each zone is an array of 4 integer values.",
          "required": true,
          "example": "[[23510,25311,25110,26362]]",
          "selector": {
            "object": null
          }
        },
        "repeats": {
          "name": "Repeats",
          "description": "Number of cleaning repeats for each zone.",
          "selector": {
            "number": {
              "min": 1,
              "max": 3
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "roborock",
            "domain": ["vacuum"]
          }
        ]
      }
    },
    "vacuum_goto": {
      "name": "Vacuum go to",
      "description": "Go to the specified coordinates",
      "fields": {
        "x_coord": {
          "name": "X coordinate",
          "description": "x-coordinate",
          "required": true,
          "example": 26300,
          "selector": {
            "text": null
          }
        },
        "y_coord": {
          "name": "Y coordinate",
          "description": "y-coordinate",
          "required": true,
          "example": 22500,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "roborock",
            "domain": ["vacuum"]
          }
        ]
      }
    },
    "vacuum_clean_segment": {
      "name": "Vacuum clean segment",
      "description": "Start cleaning of the specified segment(s).",
      "fields": {
        "segments": {
          "name": "Segments",
          "description": "Segments.",
          "required": true,
          "example": "[1,2]",
          "selector": {
            "object": null
          }
        },
        "repeats": {
          "name": "Repeats",
          "description": "Number of cleaning repeats for each segment.",
          "selector": {
            "number": {
              "min": 1,
              "max": 3
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "roborock",
            "domain": ["vacuum"]
          }
        ]
      }
    },
    "vacuum_load_multi_map": {
      "name": "Vacuum camera map load multi map",
      "description": "Change vacuum camera map.",
      "fields": {
        "map_flag": {
          "name": "Map flag",
          "description": "The id of the map to be loaded",
          "required": true,
          "example": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 4
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "roborock",
            "domain": ["vacuum"]
          }
        ]
      }
    }
  },
  "zha": {
    "permit": {
      "name": "Permit",
      "description": "Allows nodes to join the Zigbee network.",
      "fields": {
        "duration": {
          "default": 60,
          "selector": {
            "number": {
              "min": 0,
              "max": 254,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "Time to permit joins."
        },
        "ieee": {
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          },
          "name": "IEEE",
          "description": "IEEE address of the node permitting new joins."
        },
        "source_ieee": {
          "example": "00:0a:bf:00:01:10:23:35",
          "selector": {
            "text": null
          },
          "name": "Source IEEE",
          "description": "IEEE address of the joining device (must be combined with the 'Install code' field)."
        },
        "install_code": {
          "example": "1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF",
          "selector": {
            "text": null
          },
          "name": "Install code",
          "description": "Install code of the joining device (must be combined with the 'Source IEEE' field)."
        },
        "qr_code": {
          "example": "Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051",
          "selector": {
            "text": null
          },
          "name": "QR code",
          "description": "Provides both the IEEE address and the install code of the joining device (different between vendors)."
        }
      }
    },
    "remove": {
      "name": "Remove",
      "description": "Removes a node from the Zigbee network.",
      "fields": {
        "ieee": {
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          },
          "name": "IEEE",
          "description": "IEEE address of the node to remove."
        }
      }
    },
    "set_zigbee_cluster_attribute": {
      "name": "Set Zigbee cluster attribute",
      "description": "Sets an attribute value for the specified cluster on the specified entity.",
      "fields": {
        "ieee": {
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          },
          "name": "IEEE",
          "description": "IEEE address for the device."
        },
        "endpoint_id": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535,
              "mode": "box"
            }
          },
          "name": "Endpoint ID",
          "description": "Endpoint ID for the cluster."
        },
        "cluster_id": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Cluster ID",
          "description": "ZCL cluster to retrieve attributes for."
        },
        "cluster_type": {
          "default": "in",
          "selector": {
            "select": {
              "options": ["in", "out"]
            }
          },
          "name": "Cluster type",
          "description": "Type of the cluster."
        },
        "attribute": {
          "required": true,
          "example": 0,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Attribute",
          "description": "ID of the attribute to set."
        },
        "value": {
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "Value to write to the attribute."
        },
        "manufacturer": {
          "example": 252,
          "selector": {
            "text": null
          },
          "name": "Manufacturer",
          "description": "Manufacturer code. Use a value of \"-1\" to force no code to be set."
        }
      }
    },
    "issue_zigbee_cluster_command": {
      "name": "Issue Zigbee cluster command",
      "description": "Issues a command on the specified cluster on the specified entity.",
      "fields": {
        "ieee": {
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          },
          "name": "IEEE",
          "description": "IEEE address for the device."
        },
        "endpoint_id": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Endpoint ID",
          "description": "Endpoint ID for the cluster."
        },
        "cluster_id": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Cluster ID",
          "description": "ZCL cluster to retrieve attributes for."
        },
        "cluster_type": {
          "default": "in",
          "selector": {
            "select": {
              "options": ["in", "out"]
            }
          },
          "name": "Cluster type",
          "description": "Type of the cluster."
        },
        "command": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Command",
          "description": "ID of the command to execute."
        },
        "command_type": {
          "required": true,
          "selector": {
            "select": {
              "options": ["client", "server"]
            }
          },
          "name": "Command Type",
          "description": "Type of the command to execute."
        },
        "args": {
          "example": "[arg1, arg2, argN]",
          "selector": {
            "object": null
          },
          "name": "Args",
          "description": "Arguments to pass to the command."
        },
        "params": {
          "selector": {
            "object": null
          },
          "name": "Params",
          "description": "Parameters to pass to the command."
        },
        "manufacturer": {
          "example": 252,
          "selector": {
            "text": null
          },
          "name": "Manufacturer",
          "description": "Manufacturer code. Use a value of \"-1\" to force no code to be set."
        }
      }
    },
    "issue_zigbee_group_command": {
      "name": "Issue Zigbee group command",
      "description": "Issues a command on the specified cluster on the specified group.",
      "fields": {
        "group": {
          "required": true,
          "example": 546,
          "selector": {
            "text": null
          },
          "name": "Group",
          "description": "Hexadecimal address of the group."
        },
        "cluster_id": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Cluster ID",
          "description": "ZCL cluster to send command to."
        },
        "cluster_type": {
          "default": "in",
          "selector": {
            "select": {
              "options": ["in", "out"]
            }
          },
          "name": "Cluster type",
          "description": "Type of the cluster."
        },
        "command": {
          "required": true,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535
            }
          },
          "name": "Command",
          "description": "ID of the command to execute."
        },
        "args": {
          "example": "[arg1, arg2, argN]",
          "selector": {
            "object": null
          },
          "name": "Args",
          "description": "Arguments to pass to the command."
        },
        "manufacturer": {
          "example": 252,
          "selector": {
            "text": null
          },
          "name": "Manufacturer",
          "description": "Manufacturer code. Use a value of \"-1\" to force no code to be set."
        }
      }
    },
    "warning_device_squawk": {
      "name": "Warning device squawk",
      "description": "This action uses the WD capabilities to emit a quick audible/visible pulse called a \"squawk\". The squawk command has no effect if the WD is currently active (warning in progress).",
      "fields": {
        "ieee": {
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          },
          "name": "IEEE",
          "description": "IEEE address for the device."
        },
        "mode": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "mode": "box"
            }
          },
          "name": "Mode",
          "description": "The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific."
        },
        "strobe": {
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "mode": "box"
            }
          },
          "name": "Strobe",
          "description": "The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit."
        },
        "level": {
          "default": 2,
          "selector": {
            "number": {
              "min": 0,
              "max": 3,
              "mode": "box"
            }
          },
          "name": "Level",
          "description": "The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values."
        }
      }
    },
    "warning_device_warn": {
      "name": "Warning device starts alert",
      "description": "This action starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.",
      "fields": {
        "ieee": {
          "required": true,
          "example": "00:0d:6f:00:05:7d:2d:34",
          "selector": {
            "text": null
          },
          "name": "IEEE",
          "description": "IEEE address for the device."
        },
        "mode": {
          "default": 3,
          "selector": {
            "number": {
              "min": 0,
              "max": 6,
              "mode": "box"
            }
          },
          "name": "Mode",
          "description": "The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards."
        },
        "strobe": {
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "mode": "box"
            }
          },
          "name": "Strobe",
          "description": "The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. \"0\" means no strobe, \"1\" means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”), then only the strobe is activated."
        },
        "level": {
          "default": 2,
          "selector": {
            "number": {
              "min": 0,
              "max": 3,
              "mode": "box"
            }
          },
          "name": "Level",
          "description": "The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec."
        },
        "duration": {
          "default": 5,
          "selector": {
            "number": {
              "min": 0,
              "max": 65535,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are \"0\" this field is ignored."
        },
        "duty_cycle": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "step": 10
            }
          },
          "name": "Duty cycle",
          "description": "Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies “40,”, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second."
        },
        "intensity": {
          "default": 2,
          "selector": {
            "number": {
              "min": 0,
              "max": 3,
              "mode": "box"
            }
          },
          "name": "Intensity",
          "description": "Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec."
        }
      }
    },
    "set_lock_user_code": {
      "name": "Set lock user code",
      "description": "Sets a user code on a lock.",
      "fields": {
        "code_slot": {
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "Code slot",
          "description": "Code slot to set the code in."
        },
        "user_code": {
          "required": true,
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to set."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["lock"],
            "integration": "zha"
          }
        ]
      }
    },
    "enable_lock_user_code": {
      "name": "Enable lock user",
      "description": "Enables a user code on a lock.",
      "fields": {
        "code_slot": {
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "Code slot",
          "description": "Code slot to enable."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["lock"],
            "integration": "zha"
          }
        ]
      }
    },
    "disable_lock_user_code": {
      "name": "Disable lock user",
      "description": "Disables a user code on a lock.",
      "fields": {
        "code_slot": {
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "Code slot",
          "description": "Code slot to disable."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["lock"],
            "integration": "zha"
          }
        ]
      }
    },
    "clear_lock_user_code": {
      "name": "Clear lock user",
      "description": "Clears a user code from a lock.",
      "fields": {
        "code_slot": {
          "required": true,
          "example": 1,
          "selector": {
            "text": null
          },
          "name": "Code slot",
          "description": "Code slot to clear code from."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["lock"],
            "integration": "zha"
          }
        ]
      }
    }
  },
  "siren": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns the siren on.",
      "fields": {
        "tone": {
          "example": "fire",
          "filter": {
            "supported_features": [4]
          },
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Tone",
          "description": "The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration."
        },
        "volume_level": {
          "example": 0.5,
          "filter": {
            "supported_features": [8]
          },
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.05
            }
          },
          "name": "Volume",
          "description": "The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration."
        },
        "duration": {
          "example": 15,
          "filter": {
            "supported_features": [16]
          },
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Number of seconds the sound is played. Must be supported by the integration."
        }
      },
      "target": {
        "entity": [
          {
            "domain": ["siren"],
            "supported_features": [1]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns the siren off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["siren"],
            "supported_features": [2]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the siren on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": ["siren"],
            "supported_features": [3]
          }
        ]
      }
    }
  }
}
